/* Generated by Yosys 0.9 (git sha1 UNKNOWN, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os) */

(* src = "./src/ff1in1o_syn.v:8" *)
module ff1in1o_syn(clk, reset, in, out);
  (* src = "./src/ff1in1o_syn.v:15" *)
  wire [7:0] _00_;
  (* src = "./src/ff1in1o_syn.v:9" *)
  input clk;
  (* src = "./src/ff1in1o_syn.v:11" *)
  input [7:0] in;
  (* src = "./src/ff1in1o_syn.v:12" *)
  output [7:0] out;
  (* src = "./src/ff1in1o_syn.v:10" *)
  input reset;
  assign _00_[0] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/ff1in1o_syn.v:19" *) in[7] : 1'h0;
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _09_ (
    .C(clk),
    .D(_00_[0]),
    .Q(out[0])
  );
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _10_ (
    .C(clk),
    .D(_00_[1]),
    .Q(out[1])
  );
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _11_ (
    .C(clk),
    .D(_00_[2]),
    .Q(out[2])
  );
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _12_ (
    .C(clk),
    .D(_00_[3]),
    .Q(out[3])
  );
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _13_ (
    .C(clk),
    .D(_00_[4]),
    .Q(out[4])
  );
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _14_ (
    .C(clk),
    .D(_00_[5]),
    .Q(out[5])
  );
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _15_ (
    .C(clk),
    .D(_00_[6]),
    .Q(out[6])
  );
  (* src = "./src/ff1in1o_syn.v:15" *)
  DFF _16_ (
    .C(clk),
    .D(_00_[7]),
    .Q(out[7])
  );
endmodule

(* src = "./src/ff2in2o_syn.v:8" *)
module ff2in2o_syn(clk, reset, in0, in1, out0, out1);
  (* src = "./src/ff2in2o_syn.v:19" *)
  wire [7:0] _00_;
  (* src = "./src/ff2in2o_syn.v:19" *)
  wire [7:0] _01_;
  (* src = "./src/ff2in2o_syn.v:9" *)
  input clk;
  (* src = "./src/ff2in2o_syn.v:12" *)
  input [7:0] in0;
  (* src = "./src/ff2in2o_syn.v:13" *)
  input [7:0] in1;
  (* src = "./src/ff2in2o_syn.v:15" *)
  output [7:0] out0;
  (* src = "./src/ff2in2o_syn.v:16" *)
  output [7:0] out1;
  (* src = "./src/ff2in2o_syn.v:10" *)
  input reset;
  assign _01_[0] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[7] : 1'h0;
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _18_ (
    .C(clk),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _19_ (
    .C(clk),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _20_ (
    .C(clk),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _21_ (
    .C(clk),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _22_ (
    .C(clk),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _23_ (
    .C(clk),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _24_ (
    .C(clk),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _25_ (
    .C(clk),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _26_ (
    .C(clk),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _27_ (
    .C(clk),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _28_ (
    .C(clk),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _29_ (
    .C(clk),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _30_ (
    .C(clk),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _31_ (
    .C(clk),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _32_ (
    .C(clk),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _33_ (
    .C(clk),
    .D(_01_[7]),
    .Q(out1[7])
  );
endmodule

(* src = "./src/ff4in4o_syn.v:8" *)
module ff4in4o_syn(clk, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _00_;
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _01_;
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _02_;
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _03_;
  (* src = "./src/ff4in4o_syn.v:9" *)
  input clk;
  (* src = "./src/ff4in4o_syn.v:12" *)
  input [7:0] in0;
  (* src = "./src/ff4in4o_syn.v:13" *)
  input [7:0] in1;
  (* src = "./src/ff4in4o_syn.v:14" *)
  input [7:0] in2;
  (* src = "./src/ff4in4o_syn.v:15" *)
  input [7:0] in3;
  (* src = "./src/ff4in4o_syn.v:17" *)
  output [7:0] out0;
  (* src = "./src/ff4in4o_syn.v:18" *)
  output [7:0] out1;
  (* src = "./src/ff4in4o_syn.v:19" *)
  output [7:0] out2;
  (* src = "./src/ff4in4o_syn.v:20" *)
  output [7:0] out3;
  (* src = "./src/ff4in4o_syn.v:10" *)
  input reset;
  assign _03_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[0] : 1'h0;
  assign _03_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[1] : 1'h0;
  assign _03_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[2] : 1'h0;
  assign _03_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[3] : 1'h0;
  assign _03_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[4] : 1'h0;
  assign _03_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[5] : 1'h0;
  assign _03_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[6] : 1'h0;
  assign _03_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[7] : 1'h0;
  assign _02_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[0] : 1'h0;
  assign _02_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[1] : 1'h0;
  assign _02_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[2] : 1'h0;
  assign _02_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[3] : 1'h0;
  assign _02_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[4] : 1'h0;
  assign _02_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[5] : 1'h0;
  assign _02_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[6] : 1'h0;
  assign _02_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[7] : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[7] : 1'h0;
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _36_ (
    .C(clk),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _37_ (
    .C(clk),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _38_ (
    .C(clk),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _39_ (
    .C(clk),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _40_ (
    .C(clk),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _41_ (
    .C(clk),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _42_ (
    .C(clk),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _43_ (
    .C(clk),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _44_ (
    .C(clk),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _45_ (
    .C(clk),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _46_ (
    .C(clk),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _47_ (
    .C(clk),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _48_ (
    .C(clk),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _49_ (
    .C(clk),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _50_ (
    .C(clk),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _51_ (
    .C(clk),
    .D(_01_[7]),
    .Q(out1[7])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _52_ (
    .C(clk),
    .D(_02_[0]),
    .Q(out2[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _53_ (
    .C(clk),
    .D(_02_[1]),
    .Q(out2[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _54_ (
    .C(clk),
    .D(_02_[2]),
    .Q(out2[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _55_ (
    .C(clk),
    .D(_02_[3]),
    .Q(out2[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _56_ (
    .C(clk),
    .D(_02_[4]),
    .Q(out2[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _57_ (
    .C(clk),
    .D(_02_[5]),
    .Q(out2[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _58_ (
    .C(clk),
    .D(_02_[6]),
    .Q(out2[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _59_ (
    .C(clk),
    .D(_02_[7]),
    .Q(out2[7])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _60_ (
    .C(clk),
    .D(_03_[0]),
    .Q(out3[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _61_ (
    .C(clk),
    .D(_03_[1]),
    .Q(out3[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _62_ (
    .C(clk),
    .D(_03_[2]),
    .Q(out3[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _63_ (
    .C(clk),
    .D(_03_[3]),
    .Q(out3[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _64_ (
    .C(clk),
    .D(_03_[4]),
    .Q(out3[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _65_ (
    .C(clk),
    .D(_03_[5]),
    .Q(out3[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _66_ (
    .C(clk),
    .D(_03_[6]),
    .Q(out3[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _67_ (
    .C(clk),
    .D(_03_[7]),
    .Q(out3[7])
  );
endmodule

(* src = "./src/ff4in4o_synvalid.v:6" *)
module ff4in4o_synvalid(clkf, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _00_;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _01_;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _02_;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _03_;
  (* src = "./src/ff4in4o_synvalid.v:7" *)
  input clkf;
  (* src = "./src/ff4in4o_synvalid.v:10" *)
  input in0;
  (* src = "./src/ff4in4o_synvalid.v:11" *)
  input in1;
  (* src = "./src/ff4in4o_synvalid.v:12" *)
  input in2;
  (* src = "./src/ff4in4o_synvalid.v:13" *)
  input in3;
  (* src = "./src/ff4in4o_synvalid.v:15" *)
  output out0;
  (* src = "./src/ff4in4o_synvalid.v:16" *)
  output out1;
  (* src = "./src/ff4in4o_synvalid.v:17" *)
  output out2;
  (* src = "./src/ff4in4o_synvalid.v:18" *)
  output out3;
  (* src = "./src/ff4in4o_synvalid.v:8" *)
  input reset;
  assign _01_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in1 : 1'h0;
  assign _03_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in3 : 1'h0;
  assign _02_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in2 : 1'h0;
  assign _00_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in0 : 1'h0;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _08_ (
    .C(clkf),
    .D(_00_),
    .Q(out0)
  );
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _09_ (
    .C(clkf),
    .D(_01_),
    .Q(out1)
  );
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _10_ (
    .C(clkf),
    .D(_02_),
    .Q(out2)
  );
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _11_ (
    .C(clkf),
    .D(_03_),
    .Q(out3)
  );
endmodule

(* src = "./src/mux2x1_behav_syn.v:21" *)
module mux2x1_behav_syn(clk, in0, in1, valid, reset, out, validout);
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire [7:0] _00_;
  (* src = "./src/mux2x1_behav_syn.v:36" *)
  wire _01_;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire _02_;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire [7:0] _03_;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire _04_;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire [7:0] _05_;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire [7:0] _06_;
  (* src = "./src/mux2x1_behav_syn.v:40" *)
  wire _07_;
  (* src = "./src/mux2x1_behav_syn.v:24" *)
  input clk;
  (* src = "./src/mux2x1_behav_syn.v:25" *)
  input [7:0] in0;
  (* src = "./src/mux2x1_behav_syn.v:26" *)
  input [7:0] in1;
  (* src = "./src/mux2x1_behav_syn.v:31" *)
  output [7:0] out;
  (* src = "./src/mux2x1_behav_syn.v:28" *)
  input reset;
  (* src = "./src/mux2x1_behav_syn.v:34" *)
  wire selector;
  (* src = "./src/mux2x1_behav_syn.v:27" *)
  input [1:0] valid;
  (* src = "./src/mux2x1_behav_syn.v:32" *)
  output validout;
  assign _06_[0] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[0] : out[0];
  assign _06_[1] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[1] : out[1];
  assign _06_[2] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[2] : out[2];
  assign _06_[3] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[3] : out[3];
  assign _06_[4] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[4] : out[4];
  assign _06_[5] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[5] : out[5];
  assign _06_[6] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[6] : out[6];
  assign _06_[7] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[7] : out[7];
  assign _05_[0] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[0] : out[0];
  assign _05_[1] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[1] : out[1];
  assign _05_[2] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[2] : out[2];
  assign _05_[3] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[3] : out[3];
  assign _05_[4] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[4] : out[4];
  assign _05_[5] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[5] : out[5];
  assign _05_[6] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[6] : out[6];
  assign _05_[7] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[7] : out[7];
  assign _04_ = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) valid[1] : valid[0];
  assign _03_[0] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[0] : _06_[0];
  assign _03_[1] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[1] : _06_[1];
  assign _03_[2] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[2] : _06_[2];
  assign _03_[3] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[3] : _06_[3];
  assign _03_[4] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[4] : _06_[4];
  assign _03_[5] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[5] : _06_[5];
  assign _03_[6] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[6] : _06_[6];
  assign _03_[7] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[7] : _06_[7];
  assign _01_ = reset ? (* src = "./src/mux2x1_behav_syn.v:37" *) _07_ : 1'h0;
  assign _02_ = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _04_ : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _03_[7] : 1'h0;
  assign _07_ = ~(* src = "./src/mux2x1_behav_syn.v:40" *) selector;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _44_ (
    .C(clk),
    .D(_02_),
    .Q(validout)
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _45_ (
    .C(clk),
    .D(_00_[0]),
    .Q(out[0])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _46_ (
    .C(clk),
    .D(_00_[1]),
    .Q(out[1])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _47_ (
    .C(clk),
    .D(_00_[2]),
    .Q(out[2])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _48_ (
    .C(clk),
    .D(_00_[3]),
    .Q(out[3])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _49_ (
    .C(clk),
    .D(_00_[4]),
    .Q(out[4])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _50_ (
    .C(clk),
    .D(_00_[5]),
    .Q(out[5])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _51_ (
    .C(clk),
    .D(_00_[6]),
    .Q(out[6])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _52_ (
    .C(clk),
    .D(_00_[7]),
    .Q(out[7])
  );
  (* src = "./src/mux2x1_behav_syn.v:36" *)
  DFF _53_ (
    .C(clk),
    .D(_01_),
    .Q(selector)
  );
endmodule

(* src = "./src/mux4x1_behav_syn.v:27" *)
module mux4x1_behav_syn(clk1f, clk2f, clk4f, reset, in0, in1, in2, in3, valid, out, validout);
  (* src = "./src/mux4x1_behav_syn.v:30" *)
  input clk1f;
  (* src = "./src/mux4x1_behav_syn.v:31" *)
  input clk2f;
  (* src = "./src/mux4x1_behav_syn.v:32" *)
  input clk4f;
  (* src = "./src/mux4x1_behav_syn.v:34" *)
  input [7:0] in0;
  (* src = "./src/mux4x1_behav_syn.v:35" *)
  input [7:0] in1;
  (* src = "./src/mux4x1_behav_syn.v:36" *)
  input [7:0] in2;
  (* src = "./src/mux4x1_behav_syn.v:37" *)
  input [7:0] in3;
  (* src = "./src/mux4x1_behav_syn.v:45" *)
  wire [7:0] n0;
  (* src = "./src/mux4x1_behav_syn.v:45" *)
  wire [7:0] n1;
  (* src = "./src/mux4x1_behav_syn.v:45" *)
  wire [7:0] n2;
  (* src = "./src/mux4x1_behav_syn.v:45" *)
  wire [7:0] n3;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n4;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n5;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n6;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n7;
  (* src = "./src/mux4x1_behav_syn.v:40" *)
  output [7:0] out;
  (* src = "./src/mux4x1_behav_syn.v:33" *)
  input reset;
  (* src = "./src/mux4x1_behav_syn.v:52" *)
  wire v_out;
  (* src = "./src/mux4x1_behav_syn.v:38" *)
  input [3:0] valid;
  (* src = "./src/mux4x1_behav_syn.v:50" *)
  wire [1:0] valid_21;
  (* src = "./src/mux4x1_behav_syn.v:53" *)
  wire valid_final;
  (* src = "./src/mux4x1_behav_syn.v:49" *)
  wire [3:0] valid_n;
  (* src = "./src/mux4x1_behav_syn.v:51" *)
  wire [1:0] valid_out;
  (* src = "./src/mux4x1_behav_syn.v:41" *)
  output validout;
  (* src = "./src/mux4x1_behav_syn.v:48" *)
  wire [7:0] w;
  (* src = "./src/mux4x1_behav_syn.v:47" *)
  wire [7:0] wout;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:136" *)
  ff1in1o_syn ff21 (
    .clk(clk4f),
    .in(w),
    .out(wout),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:57" *)
  ff4in4o_syn ff4 (
    .clk(clk1f),
    .in0(in0),
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .out0(n0),
    .out1(n1),
    .out2(n2),
    .out3(n3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:102" *)
  ff2in2o_syn ff42 (
    .clk(clk2f),
    .in0(n4),
    .in1(n5),
    .out0(n6),
    .out1(n7),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:111" *)
  ff4in4o_synvalid ffvalid21 (
    .clkf(clk2f),
    .in0(valid_out[0]),
    .in1(valid_out[1]),
    .out0(valid_21[0]),
    .out1(valid_21[1]),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:70" *)
  ff4in4o_synvalid ffvalid42 (
    .clkf(clk1f),
    .in0(valid[0]),
    .in1(valid[1]),
    .in2(valid[2]),
    .in3(valid[3]),
    .out0(valid_n[0]),
    .out1(valid_n[1]),
    .out2(valid_n[2]),
    .out3(valid_n[3]),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:143" *)
  ff4in4o_synvalid ffvalidfinal (
    .clkf(clk4f),
    .in0(v_out),
    .out0(valid_final),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:88" *)
  mux4x2_behav_syn mux_A (
    .clk(clk2f),
    .in0(n0),
    .in1(n1),
    .in2(n2),
    .in3(n3),
    .out0(n4),
    .out1(n5),
    .reset(reset),
    .valid(valid_n),
    .validout(valid_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:124" *)
  mux2x1_behav_syn mux_B (
    .clk(clk4f),
    .in0(n6),
    .in1(n7),
    .out(w),
    .reset(reset),
    .valid(valid_21),
    .validout(v_out)
  );
  assign out = wout;
  assign validout = valid_final;
endmodule

(* src = "./src/mux4x2_behav_syn.v:23" *)
module mux4x2_behav_syn(clk, in0, in1, in2, in3, valid, reset, out0, out1, validout);
  (* src = "./src/mux4x2_behav_syn.v:26" *)
  input clk;
  (* src = "./src/mux4x2_behav_syn.v:27" *)
  input [7:0] in0;
  (* src = "./src/mux4x2_behav_syn.v:28" *)
  input [7:0] in1;
  (* src = "./src/mux4x2_behav_syn.v:29" *)
  input [7:0] in2;
  (* src = "./src/mux4x2_behav_syn.v:30" *)
  input [7:0] in3;
  (* src = "./src/mux4x2_behav_syn.v:35" *)
  output [7:0] out0;
  (* src = "./src/mux4x2_behav_syn.v:36" *)
  output [7:0] out1;
  (* src = "./src/mux4x2_behav_syn.v:32" *)
  input reset;
  (* src = "./src/mux4x2_behav_syn.v:31" *)
  input [3:0] valid;
  (* src = "./src/mux4x2_behav_syn.v:37" *)
  output [1:0] validout;
  (* src = "./src/mux4x2_behav_syn.v:43" *)
  wire validoutA;
  (* src = "./src/mux4x2_behav_syn.v:43" *)
  wire validoutB;
  (* src = "./src/mux4x2_behav_syn.v:41" *)
  wire [7:0] wout0;
  (* src = "./src/mux4x2_behav_syn.v:42" *)
  wire [7:0] wout1;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x2_behav_syn.v:47" *)
  mux2x1_behav_syn mux_A (
    .clk(clk),
    .in0(in0),
    .in1(in1),
    .out(wout0),
    .reset(reset),
    .valid(valid[1:0]),
    .validout(validoutA)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x2_behav_syn.v:56" *)
  mux2x1_behav_syn mux_B (
    .clk(clk),
    .in0(in2),
    .in1(in3),
    .out(wout1),
    .reset(reset),
    .valid(valid[3:2]),
    .validout(validoutB)
  );
  assign out0 = wout0;
  assign out1 = wout1;
  assign validout = { validoutB, validoutA };
endmodule

(* src = "./src/paralelltoserial.v:7" *)
module paralelo_a_serial_syn(in, in_valid, reset, clk32f, out);
  (* src = "./src/paralelltoserial.v:30" *)
  wire _000_;
  (* src = "./src/paralelltoserial.v:30" *)
  wire _001_;
  (* src = "./src/paralelltoserial.v:30" *)
  wire _002_;
  (* src = "./src/paralelltoserial.v:30" *)
  wire [2:0] _003_;
  (* src = "./src/paralelltoserial.v:40" *)
  (* unused_bits = "3" *)
  wire [31:0] _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire [3:0] _009_;
  wire [1:0] _010_;
  wire [3:0] _011_;
  wire [1:0] _012_;
  wire _013_;
  wire [2:0] _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  (* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:432" *)
  wire [7:0] _023_;
  (* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:428" *)
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  (* src = "./src/paralelltoserial.v:40|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _033_;
  (* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)
  wire _034_;
  (* src = "./src/paralelltoserial.v:12" *)
  input clk32f;
  (* src = "./src/paralelltoserial.v:19" *)
  wire dataflux1;
  (* src = "./src/paralelltoserial.v:19" *)
  wire dataflux2;
  (* src = "./src/paralelltoserial.v:9" *)
  input [7:0] in;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in0;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in1;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in2;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in3;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in4;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in5;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in6;
  (* src = "./src/paralelltoserial.v:18" *)
  wire in7;
  (* src = "./src/paralelltoserial.v:10" *)
  input in_valid;
  (* src = "./src/paralelltoserial.v:13" *)
  output out;
  (* src = "./src/paralelltoserial.v:11" *)
  input reset;
  (* src = "./src/paralelltoserial.v:20" *)
  wire [2:0] selector;
  assign _015_ = _005_ |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41" *)  _014_[2];
  assign _016_ = _006_ |(* src = "./src/paralelltoserial.v:48|./src/paralelltoserial.v:41" *)  _014_[2];
  assign _017_ = _007_ |(* src = "./src/paralelltoserial.v:47|./src/paralelltoserial.v:41" *)  _014_[2];
  assign _018_ = _008_ |(* src = "./src/paralelltoserial.v:46|./src/paralelltoserial.v:41" *)  _014_[2];
  assign _005_ = _004_[0] |(* src = "./src/paralelltoserial.v:45|./src/paralelltoserial.v:41" *)  _014_[1];
  assign _019_ = _005_ |(* src = "./src/paralelltoserial.v:45|./src/paralelltoserial.v:41" *)  selector[2];
  assign _006_ = selector[0] |(* src = "./src/paralelltoserial.v:44|./src/paralelltoserial.v:41" *)  _014_[1];
  assign _020_ = _006_ |(* src = "./src/paralelltoserial.v:44|./src/paralelltoserial.v:41" *)  selector[2];
  assign _007_ = _004_[0] |(* src = "./src/paralelltoserial.v:43|./src/paralelltoserial.v:41" *)  selector[1];
  assign _021_ = _007_ |(* src = "./src/paralelltoserial.v:43|./src/paralelltoserial.v:41" *)  selector[2];
  assign _009_[0] = _023_[0] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:441" *)  _023_[1];
  assign _009_[1] = _023_[2] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:441" *)  _023_[3];
  assign _009_[2] = _023_[4] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:441" *)  _023_[5];
  assign _009_[3] = _023_[6] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:441" *)  _023_[7];
  assign _010_[0] = _009_[0] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:441" *)  _009_[1];
  assign _010_[1] = _009_[2] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:441" *)  _009_[3];
  assign _024_ = _010_[0] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:441" *)  _010_[1];
  assign _011_[0] = _026_ |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)  _027_;
  assign _011_[1] = _028_ |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)  _029_;
  assign _011_[2] = _030_ |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)  _031_;
  assign _011_[3] = _032_ |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)  _022_;
  assign _012_[0] = _011_[0] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)  _011_[1];
  assign _012_[1] = _011_[2] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)  _011_[3];
  assign _034_ = _012_[0] |(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *)  _012_[1];
  assign _008_ = selector[0] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:41" *)  selector[1];
  assign _013_ = _008_ |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:41" *)  selector[2];
  assign _026_ = ~(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41" *) _015_;
  assign _027_ = ~(* src = "./src/paralelltoserial.v:48|./src/paralelltoserial.v:41" *) _016_;
  assign _028_ = ~(* src = "./src/paralelltoserial.v:47|./src/paralelltoserial.v:41" *) _017_;
  assign _029_ = ~(* src = "./src/paralelltoserial.v:46|./src/paralelltoserial.v:41" *) _018_;
  assign _030_ = ~(* src = "./src/paralelltoserial.v:45|./src/paralelltoserial.v:41" *) _019_;
  assign _031_ = ~(* src = "./src/paralelltoserial.v:44|./src/paralelltoserial.v:41" *) _020_;
  assign _032_ = ~(* src = "./src/paralelltoserial.v:43|./src/paralelltoserial.v:41" *) _021_;
  assign _022_ = ~(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:41" *) _013_;
  assign _001_ = reset ? (* src = "./src/paralelltoserial.v:31" *) dataflux1 : 1'h0;
  assign _000_ = reset ? (* src = "./src/paralelltoserial.v:31" *) _025_ : 1'h0;
  assign in7 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[0] : 1'h0;
  assign in6 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[1] : 1'h0;
  assign in5 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[2] : 1'h1;
  assign in4 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[3] : 1'h1;
  assign in3 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[4] : 1'h1;
  assign in2 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[5] : 1'h1;
  assign in1 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[6] : 1'h0;
  assign in0 = in_valid ? (* src = "./src/paralelltoserial.v:24" *) in[7] : 1'h1;
  assign _002_ = reset ? (* src = "./src/paralelltoserial.v:31" *) dataflux2 : 1'h0;
  assign _003_[0] = reset ? (* src = "./src/paralelltoserial.v:31" *) _004_[0] : 1'h1;
  assign _003_[1] = reset ? (* src = "./src/paralelltoserial.v:31" *) _004_[1] : 1'h1;
  assign _003_[2] = reset ? (* src = "./src/paralelltoserial.v:31" *) _004_[2] : 1'h1;
  assign _025_ = _034_ ? (* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:445" *) _024_ : 1'hx;
  (* src = "./src/paralelltoserial.v:30" *)
  DFF _084_ (
    .C(clk32f),
    .D(_003_[0]),
    .Q(selector[0])
  );
  (* src = "./src/paralelltoserial.v:30" *)
  DFF _085_ (
    .C(clk32f),
    .D(_003_[1]),
    .Q(selector[1])
  );
  (* src = "./src/paralelltoserial.v:30" *)
  DFF _086_ (
    .C(clk32f),
    .D(_003_[2]),
    .Q(selector[2])
  );
  (* src = "./src/paralelltoserial.v:30" *)
  DFF _087_ (
    .C(clk32f),
    .D(_002_),
    .Q(out)
  );
  (* src = "./src/paralelltoserial.v:30" *)
  DFF _088_ (
    .C(clk32f),
    .D(_000_),
    .Q(dataflux1)
  );
  (* src = "./src/paralelltoserial.v:30" *)
  DFF _089_ (
    .C(clk32f),
    .D(_001_),
    .Q(dataflux2)
  );
  assign _033_[1] = selector[1] &(* src = "./src/paralelltoserial.v:40|<techmap.v>:260|<techmap.v>:221" *)  selector[0];
  assign _014_[2] = selector[2] ^(* src = "./src/paralelltoserial.v:46|./src/paralelltoserial.v:41" *)  1'h1;
  assign _014_[1] = selector[1] ^(* src = "./src/paralelltoserial.v:44|./src/paralelltoserial.v:41" *)  1'h1;
  assign _023_[4] = in3 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _030_;
  assign _023_[7] = in0 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _022_;
  assign _023_[6] = in1 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _032_;
  assign _023_[5] = in2 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _031_;
  assign _023_[3] = in4 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _029_;
  assign _023_[2] = in5 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _028_;
  assign _023_[1] = in6 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _027_;
  assign _023_[0] = in7 &(* src = "./src/paralelltoserial.v:49|./src/paralelltoserial.v:41|<techmap.v>:434" *)  _026_;
  assign _004_[1] = selector[1] ^(* src = "./src/paralelltoserial.v:40|<techmap.v>:263" *)  selector[0];
  assign _004_[2] = selector[2] ^(* src = "./src/paralelltoserial.v:40|<techmap.v>:263" *)  _033_[1];
  assign _004_[0] = selector[0] ^(* src = "./src/paralelltoserial.v:40|<techmap.v>:262" *)  1'h1;
  assign _004_[31:4] = 28'h0000000;
  assign _014_[0] = _004_[0];
  assign { _033_[31:2], _033_[0] } = { 29'h00000000, _004_[3], selector[0] };
endmodule

(* top =  1  *)
(* src = "./src/phy_tx.v:16" *)
module phy_tx_b_syn(clk1f, clk2f, clk4f, clk32f, reset, in0, in1, in2, in3, in_rx_tx, validmux41, out0_recir, out1_recir, out2_recir, out3_recir, out_b);
  (* src = "./src/phy_tx.v:45" *)
  wire active_inter;
  (* src = "./src/phy_tx.v:18" *)
  input clk1f;
  (* src = "./src/phy_tx.v:19" *)
  input clk2f;
  (* src = "./src/phy_tx.v:21" *)
  input clk32f;
  (* src = "./src/phy_tx.v:20" *)
  input clk4f;
  (* src = "./src/phy_tx.v:24" *)
  input [7:0] in0;
  (* src = "./src/phy_tx.v:25" *)
  input [7:0] in1;
  (* src = "./src/phy_tx.v:26" *)
  input [7:0] in2;
  (* src = "./src/phy_tx.v:27" *)
  input [7:0] in3;
  (* src = "./src/phy_tx.v:28" *)
  input in_rx_tx;
  (* src = "./src/phy_tx.v:43" *)
  wire [7:0] mux41_to_parserno;
  (* src = "./src/phy_tx.v:50" *)
  wire [7:0] o0;
  (* src = "./src/phy_tx.v:50" *)
  wire [7:0] o1;
  (* src = "./src/phy_tx.v:50" *)
  wire [7:0] o2;
  (* src = "./src/phy_tx.v:50" *)
  wire [7:0] o3;
  (* src = "./src/phy_tx.v:51" *)
  wire [7:0] ot0;
  (* src = "./src/phy_tx.v:51" *)
  wire [7:0] ot1;
  (* src = "./src/phy_tx.v:51" *)
  wire [7:0] ot2;
  (* src = "./src/phy_tx.v:51" *)
  wire [7:0] ot3;
  (* src = "./src/phy_tx.v:33" *)
  output [7:0] out0_recir;
  (* src = "./src/phy_tx.v:34" *)
  output [7:0] out1_recir;
  (* src = "./src/phy_tx.v:35" *)
  output [7:0] out2_recir;
  (* src = "./src/phy_tx.v:36" *)
  output [7:0] out3_recir;
  (* src = "./src/phy_tx.v:39" *)
  output out_b;
  (* src = "./src/phy_tx.v:44" *)
  wire out_conec;
  (* src = "./src/phy_tx.v:22" *)
  input reset;
  (* src = "./src/phy_tx.v:30" *)
  input [3:0] validmux41;
  (* src = "./src/phy_tx.v:47" *)
  wire validparserno;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_tx.v:94" *)
  mux4x1_behav_syn mux41_phy_tx (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk4f(clk4f),
    .in0(o0),
    .in1(o1),
    .in2(o2),
    .in3(o3),
    .out(mux41_to_parserno),
    .reset(reset),
    .valid(validmux41),
    .validout(validparserno)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_tx.v:110" *)
  paralelo_a_serial_syn parserno_tx (
    .clk32f(clk32f),
    .in(mux41_to_parserno),
    .in_valid(validparserno),
    .out(out_conec),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_tx.v:53" *)
  recir_idle_syn reciridle (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk4f(clk4f),
    .in0(in0),
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .out0m(o0),
    .out0t(ot0),
    .out1m(o1),
    .out1t(ot1),
    .out2m(o2),
    .out2t(ot2),
    .out3m(o3),
    .out3t(ot3),
    .reset(reset),
    .valid_in(validmux41),
    .valid_outm(validmux41),
    .valid_outt(validmux41),
    .valido(active_inter)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_tx.v:83" *)
  serieparaleloIDL_syn spidle (
    .clk32f(clk32f),
    .clk4f(clk4f),
    .in(in_rx_tx),
    .reset(reset),
    .valido(active_inter)
  );
  assign out0_recir = ot0;
  assign out1_recir = ot1;
  assign out2_recir = ot2;
  assign out3_recir = ot3;
  assign out_b = out_conec;
endmodule

(* src = "./src/recir_idle_syn.v:6" *)
module recir_idle_syn(clk1f, clk2f, clk4f, reset, valido, in0, in1, in2, in3, valid_in, out0m, out1m, out2m, out3m, valid_outm, out0t, out1t, out2t, out3t, valid_outt);
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _000_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _001_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _002_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _003_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _004_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _005_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _006_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [7:0] _007_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [3:0] _008_;
  (* src = "./src/recir_idle_syn.v:45" *)
  wire [3:0] _009_;
  (* src = "./src/recir_idle_syn.v:8" *)
  input clk1f;
  (* src = "./src/recir_idle_syn.v:9" *)
  input clk2f;
  (* src = "./src/recir_idle_syn.v:10" *)
  input clk4f;
  (* src = "./src/recir_idle_syn.v:40" *)
  wire idle_stand;
  (* src = "./src/recir_idle_syn.v:15" *)
  input [7:0] in0;
  (* src = "./src/recir_idle_syn.v:16" *)
  input [7:0] in1;
  (* src = "./src/recir_idle_syn.v:17" *)
  input [7:0] in2;
  (* src = "./src/recir_idle_syn.v:18" *)
  input [7:0] in3;
  (* src = "./src/recir_idle_syn.v:21" *)
  output [7:0] out0m;
  (* src = "./src/recir_idle_syn.v:27" *)
  output [7:0] out0t;
  (* src = "./src/recir_idle_syn.v:22" *)
  output [7:0] out1m;
  (* src = "./src/recir_idle_syn.v:28" *)
  output [7:0] out1t;
  (* src = "./src/recir_idle_syn.v:23" *)
  output [7:0] out2m;
  (* src = "./src/recir_idle_syn.v:29" *)
  output [7:0] out2t;
  (* src = "./src/recir_idle_syn.v:24" *)
  output [7:0] out3m;
  (* src = "./src/recir_idle_syn.v:30" *)
  output [7:0] out3t;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm0;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm1;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm2;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm3;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt0;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt1;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt2;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt3;
  (* src = "./src/recir_idle_syn.v:11" *)
  input reset;
  (* src = "./src/recir_idle_syn.v:19" *)
  input [3:0] valid_in;
  (* src = "./src/recir_idle_syn.v:25" *)
  output [3:0] valid_outm;
  (* src = "./src/recir_idle_syn.v:31" *)
  output [3:0] valid_outt;
  (* src = "./src/recir_idle_syn.v:13" *)
  input valido;
  (* src = "./src/recir_idle_syn.v:41" *)
  wire [3:0] validoutm;
  (* src = "./src/recir_idle_syn.v:41" *)
  wire [3:0] validoutt;
  assign _009_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) validoutt[0] : valid_in[0];
  assign _009_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) validoutt[1] : valid_in[1];
  assign _009_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) validoutt[2] : valid_in[2];
  assign _009_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) validoutt[3] : valid_in[3];
  assign _008_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) valid_in[0] : validoutm[0];
  assign _008_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) valid_in[1] : validoutm[1];
  assign _008_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) valid_in[2] : validoutm[2];
  assign _008_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) valid_in[3] : validoutm[3];
  assign _007_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[0];
  assign _007_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[1];
  assign _007_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[2];
  assign _007_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[3];
  assign _007_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[4];
  assign _007_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[5];
  assign _007_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[6];
  assign _007_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in3[7];
  assign _004_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[0];
  assign _004_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[1];
  assign _004_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[2];
  assign _004_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[3];
  assign _004_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[4];
  assign _004_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[5];
  assign _004_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[6];
  assign _004_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in0[7];
  assign _006_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[0];
  assign _006_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[1];
  assign _006_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[2];
  assign _006_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[3];
  assign _006_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[4];
  assign _006_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[5];
  assign _006_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[6];
  assign _006_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in2[7];
  assign _005_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[0];
  assign _005_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[1];
  assign _005_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[2];
  assign _005_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[3];
  assign _005_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[4];
  assign _005_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[5];
  assign _005_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[6];
  assign _005_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) 1'h0 : in1[7];
  assign _001_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[0] : 1'h0;
  assign _001_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[1] : 1'h0;
  assign _001_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[2] : 1'h0;
  assign _001_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[3] : 1'h0;
  assign _001_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[4] : 1'h0;
  assign _001_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[5] : 1'h0;
  assign _001_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[6] : 1'h0;
  assign _001_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in1[7] : 1'h0;
  assign _003_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[0] : 1'h0;
  assign _003_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[1] : 1'h0;
  assign _003_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[2] : 1'h0;
  assign _003_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[3] : 1'h0;
  assign _003_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[4] : 1'h0;
  assign _003_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[5] : 1'h0;
  assign _003_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[6] : 1'h0;
  assign _003_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in3[7] : 1'h0;
  assign _002_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[0] : 1'h0;
  assign _002_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[1] : 1'h0;
  assign _002_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[2] : 1'h0;
  assign _002_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[3] : 1'h0;
  assign _002_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[4] : 1'h0;
  assign _002_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[5] : 1'h0;
  assign _002_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[6] : 1'h0;
  assign _002_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in2[7] : 1'h0;
  assign _000_[0] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[0] : 1'h0;
  assign _000_[1] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[1] : 1'h0;
  assign _000_[2] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[2] : 1'h0;
  assign _000_[3] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[3] : 1'h0;
  assign _000_[4] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[4] : 1'h0;
  assign _000_[5] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[5] : 1'h0;
  assign _000_[6] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[6] : 1'h0;
  assign _000_[7] = valido ? (* src = "./src/recir_idle_syn.v:46" *) in0[7] : 1'h0;
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _082_ (
    .C(clk1f),
    .D(validoutm[0]),
    .Q(valid_outm[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _083_ (
    .C(clk1f),
    .D(validoutm[1]),
    .Q(valid_outm[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _084_ (
    .C(clk1f),
    .D(validoutm[2]),
    .Q(valid_outm[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _085_ (
    .C(clk1f),
    .D(validoutm[3]),
    .Q(valid_outm[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _086_ (
    .C(clk1f),
    .D(outm0[0]),
    .Q(out0m[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _087_ (
    .C(clk1f),
    .D(outm0[1]),
    .Q(out0m[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _088_ (
    .C(clk1f),
    .D(outm0[2]),
    .Q(out0m[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _089_ (
    .C(clk1f),
    .D(outm0[3]),
    .Q(out0m[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _090_ (
    .C(clk1f),
    .D(outm0[4]),
    .Q(out0m[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _091_ (
    .C(clk1f),
    .D(outm0[5]),
    .Q(out0m[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _092_ (
    .C(clk1f),
    .D(outm0[6]),
    .Q(out0m[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _093_ (
    .C(clk1f),
    .D(outm0[7]),
    .Q(out0m[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _094_ (
    .C(clk1f),
    .D(outt0[0]),
    .Q(out0t[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _095_ (
    .C(clk1f),
    .D(outt0[1]),
    .Q(out0t[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _096_ (
    .C(clk1f),
    .D(outt0[2]),
    .Q(out0t[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _097_ (
    .C(clk1f),
    .D(outt0[3]),
    .Q(out0t[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _098_ (
    .C(clk1f),
    .D(outt0[4]),
    .Q(out0t[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _099_ (
    .C(clk1f),
    .D(outt0[5]),
    .Q(out0t[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _100_ (
    .C(clk1f),
    .D(outt0[6]),
    .Q(out0t[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _101_ (
    .C(clk1f),
    .D(outt0[7]),
    .Q(out0t[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _102_ (
    .C(clk1f),
    .D(outm1[0]),
    .Q(out1m[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _103_ (
    .C(clk1f),
    .D(outm1[1]),
    .Q(out1m[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _104_ (
    .C(clk1f),
    .D(outm1[2]),
    .Q(out1m[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _105_ (
    .C(clk1f),
    .D(outm1[3]),
    .Q(out1m[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _106_ (
    .C(clk1f),
    .D(outm1[4]),
    .Q(out1m[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _107_ (
    .C(clk1f),
    .D(outm1[5]),
    .Q(out1m[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _108_ (
    .C(clk1f),
    .D(outm1[6]),
    .Q(out1m[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _109_ (
    .C(clk1f),
    .D(outm1[7]),
    .Q(out1m[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _110_ (
    .C(clk1f),
    .D(outm3[0]),
    .Q(out3m[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _111_ (
    .C(clk1f),
    .D(outm3[1]),
    .Q(out3m[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _112_ (
    .C(clk1f),
    .D(outm3[2]),
    .Q(out3m[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _113_ (
    .C(clk1f),
    .D(outm3[3]),
    .Q(out3m[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _114_ (
    .C(clk1f),
    .D(outm3[4]),
    .Q(out3m[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _115_ (
    .C(clk1f),
    .D(outm3[5]),
    .Q(out3m[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _116_ (
    .C(clk1f),
    .D(outm3[6]),
    .Q(out3m[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _117_ (
    .C(clk1f),
    .D(outm3[7]),
    .Q(out3m[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _118_ (
    .C(clk1f),
    .D(outt1[0]),
    .Q(out1t[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _119_ (
    .C(clk1f),
    .D(outt1[1]),
    .Q(out1t[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _120_ (
    .C(clk1f),
    .D(outt1[2]),
    .Q(out1t[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _121_ (
    .C(clk1f),
    .D(outt1[3]),
    .Q(out1t[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _122_ (
    .C(clk1f),
    .D(outt1[4]),
    .Q(out1t[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _123_ (
    .C(clk1f),
    .D(outt1[5]),
    .Q(out1t[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _124_ (
    .C(clk1f),
    .D(outt1[6]),
    .Q(out1t[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _125_ (
    .C(clk1f),
    .D(outt1[7]),
    .Q(out1t[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _126_ (
    .C(clk1f),
    .D(outt2[0]),
    .Q(out2t[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _127_ (
    .C(clk1f),
    .D(outt2[1]),
    .Q(out2t[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _128_ (
    .C(clk1f),
    .D(outt2[2]),
    .Q(out2t[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _129_ (
    .C(clk1f),
    .D(outt2[3]),
    .Q(out2t[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _130_ (
    .C(clk1f),
    .D(outt2[4]),
    .Q(out2t[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _131_ (
    .C(clk1f),
    .D(outt2[5]),
    .Q(out2t[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _132_ (
    .C(clk1f),
    .D(outt2[6]),
    .Q(out2t[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _133_ (
    .C(clk1f),
    .D(outt2[7]),
    .Q(out2t[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _134_ (
    .C(clk1f),
    .D(outm2[0]),
    .Q(out2m[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _135_ (
    .C(clk1f),
    .D(outm2[1]),
    .Q(out2m[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _136_ (
    .C(clk1f),
    .D(outm2[2]),
    .Q(out2m[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _137_ (
    .C(clk1f),
    .D(outm2[3]),
    .Q(out2m[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _138_ (
    .C(clk1f),
    .D(outm2[4]),
    .Q(out2m[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _139_ (
    .C(clk1f),
    .D(outm2[5]),
    .Q(out2m[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _140_ (
    .C(clk1f),
    .D(outm2[6]),
    .Q(out2m[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _141_ (
    .C(clk1f),
    .D(outm2[7]),
    .Q(out2m[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _142_ (
    .C(clk1f),
    .D(outt3[0]),
    .Q(out3t[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _143_ (
    .C(clk1f),
    .D(outt3[1]),
    .Q(out3t[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _144_ (
    .C(clk1f),
    .D(outt3[2]),
    .Q(out3t[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _145_ (
    .C(clk1f),
    .D(outt3[3]),
    .Q(out3t[3])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _146_ (
    .C(clk1f),
    .D(outt3[4]),
    .Q(out3t[4])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _147_ (
    .C(clk1f),
    .D(outt3[5]),
    .Q(out3t[5])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _148_ (
    .C(clk1f),
    .D(outt3[6]),
    .Q(out3t[6])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _149_ (
    .C(clk1f),
    .D(outt3[7]),
    .Q(out3t[7])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _150_ (
    .C(clk1f),
    .D(validoutt[0]),
    .Q(valid_outt[0])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _151_ (
    .C(clk1f),
    .D(validoutt[1]),
    .Q(valid_outt[1])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _152_ (
    .C(clk1f),
    .D(validoutt[2]),
    .Q(valid_outt[2])
  );
  (* src = "./src/recir_idle_syn.v:72" *)
  DFF _153_ (
    .C(clk1f),
    .D(validoutt[3]),
    .Q(valid_outt[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _154_ (
    .C(clk4f),
    .D(_000_[0]),
    .Q(outm0[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _155_ (
    .C(clk4f),
    .D(_000_[1]),
    .Q(outm0[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _156_ (
    .C(clk4f),
    .D(_000_[2]),
    .Q(outm0[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _157_ (
    .C(clk4f),
    .D(_000_[3]),
    .Q(outm0[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _158_ (
    .C(clk4f),
    .D(_000_[4]),
    .Q(outm0[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _159_ (
    .C(clk4f),
    .D(_000_[5]),
    .Q(outm0[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _160_ (
    .C(clk4f),
    .D(_000_[6]),
    .Q(outm0[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _161_ (
    .C(clk4f),
    .D(_000_[7]),
    .Q(outm0[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _162_ (
    .C(clk4f),
    .D(_001_[0]),
    .Q(outm1[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _163_ (
    .C(clk4f),
    .D(_001_[1]),
    .Q(outm1[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _164_ (
    .C(clk4f),
    .D(_001_[2]),
    .Q(outm1[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _165_ (
    .C(clk4f),
    .D(_001_[3]),
    .Q(outm1[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _166_ (
    .C(clk4f),
    .D(_001_[4]),
    .Q(outm1[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _167_ (
    .C(clk4f),
    .D(_001_[5]),
    .Q(outm1[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _168_ (
    .C(clk4f),
    .D(_001_[6]),
    .Q(outm1[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _169_ (
    .C(clk4f),
    .D(_001_[7]),
    .Q(outm1[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _170_ (
    .C(clk4f),
    .D(_002_[0]),
    .Q(outm2[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _171_ (
    .C(clk4f),
    .D(_002_[1]),
    .Q(outm2[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _172_ (
    .C(clk4f),
    .D(_002_[2]),
    .Q(outm2[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _173_ (
    .C(clk4f),
    .D(_002_[3]),
    .Q(outm2[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _174_ (
    .C(clk4f),
    .D(_002_[4]),
    .Q(outm2[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _175_ (
    .C(clk4f),
    .D(_002_[5]),
    .Q(outm2[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _176_ (
    .C(clk4f),
    .D(_002_[6]),
    .Q(outm2[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _177_ (
    .C(clk4f),
    .D(_002_[7]),
    .Q(outm2[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _178_ (
    .C(clk4f),
    .D(_003_[0]),
    .Q(outm3[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _179_ (
    .C(clk4f),
    .D(_003_[1]),
    .Q(outm3[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _180_ (
    .C(clk4f),
    .D(_003_[2]),
    .Q(outm3[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _181_ (
    .C(clk4f),
    .D(_003_[3]),
    .Q(outm3[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _182_ (
    .C(clk4f),
    .D(_003_[4]),
    .Q(outm3[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _183_ (
    .C(clk4f),
    .D(_003_[5]),
    .Q(outm3[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _184_ (
    .C(clk4f),
    .D(_003_[6]),
    .Q(outm3[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _185_ (
    .C(clk4f),
    .D(_003_[7]),
    .Q(outm3[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _186_ (
    .C(clk4f),
    .D(_004_[0]),
    .Q(outt0[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _187_ (
    .C(clk4f),
    .D(_004_[1]),
    .Q(outt0[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _188_ (
    .C(clk4f),
    .D(_004_[2]),
    .Q(outt0[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _189_ (
    .C(clk4f),
    .D(_004_[3]),
    .Q(outt0[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _190_ (
    .C(clk4f),
    .D(_004_[4]),
    .Q(outt0[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _191_ (
    .C(clk4f),
    .D(_004_[5]),
    .Q(outt0[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _192_ (
    .C(clk4f),
    .D(_004_[6]),
    .Q(outt0[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _193_ (
    .C(clk4f),
    .D(_004_[7]),
    .Q(outt0[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _194_ (
    .C(clk4f),
    .D(_005_[0]),
    .Q(outt1[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _195_ (
    .C(clk4f),
    .D(_005_[1]),
    .Q(outt1[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _196_ (
    .C(clk4f),
    .D(_005_[2]),
    .Q(outt1[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _197_ (
    .C(clk4f),
    .D(_005_[3]),
    .Q(outt1[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _198_ (
    .C(clk4f),
    .D(_005_[4]),
    .Q(outt1[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _199_ (
    .C(clk4f),
    .D(_005_[5]),
    .Q(outt1[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _200_ (
    .C(clk4f),
    .D(_005_[6]),
    .Q(outt1[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _201_ (
    .C(clk4f),
    .D(_005_[7]),
    .Q(outt1[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _202_ (
    .C(clk4f),
    .D(_006_[0]),
    .Q(outt2[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _203_ (
    .C(clk4f),
    .D(_006_[1]),
    .Q(outt2[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _204_ (
    .C(clk4f),
    .D(_006_[2]),
    .Q(outt2[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _205_ (
    .C(clk4f),
    .D(_006_[3]),
    .Q(outt2[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _206_ (
    .C(clk4f),
    .D(_006_[4]),
    .Q(outt2[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _207_ (
    .C(clk4f),
    .D(_006_[5]),
    .Q(outt2[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _208_ (
    .C(clk4f),
    .D(_006_[6]),
    .Q(outt2[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _209_ (
    .C(clk4f),
    .D(_006_[7]),
    .Q(outt2[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _210_ (
    .C(clk4f),
    .D(_007_[0]),
    .Q(outt3[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _211_ (
    .C(clk4f),
    .D(_007_[1]),
    .Q(outt3[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _212_ (
    .C(clk4f),
    .D(_007_[2]),
    .Q(outt3[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _213_ (
    .C(clk4f),
    .D(_007_[3]),
    .Q(outt3[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _214_ (
    .C(clk4f),
    .D(_007_[4]),
    .Q(outt3[4])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _215_ (
    .C(clk4f),
    .D(_007_[5]),
    .Q(outt3[5])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _216_ (
    .C(clk4f),
    .D(_007_[6]),
    .Q(outt3[6])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _217_ (
    .C(clk4f),
    .D(_007_[7]),
    .Q(outt3[7])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _218_ (
    .C(clk4f),
    .D(_008_[0]),
    .Q(validoutm[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _219_ (
    .C(clk4f),
    .D(_008_[1]),
    .Q(validoutm[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _220_ (
    .C(clk4f),
    .D(_008_[2]),
    .Q(validoutm[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _221_ (
    .C(clk4f),
    .D(_008_[3]),
    .Q(validoutm[3])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _222_ (
    .C(clk4f),
    .D(_009_[0]),
    .Q(validoutt[0])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _223_ (
    .C(clk4f),
    .D(_009_[1]),
    .Q(validoutt[1])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _224_ (
    .C(clk4f),
    .D(_009_[2]),
    .Q(validoutt[2])
  );
  (* src = "./src/recir_idle_syn.v:45" *)
  DFF _225_ (
    .C(clk4f),
    .D(_009_[3]),
    .Q(validoutt[3])
  );
  assign idle_stand = 1'h1;
endmodule

(* src = "./src/serie_paralelo_idle.v:24" *)
module serieparaleloIDL_syn(in, clk32f, clk4f, reset, valido);
  (* src = "./src/serie_paralelo_idle.v:51" *)
  wire [3:0] _00_;
  (* src = "./src/serie_paralelo_idle.v:40" *)
  wire [7:0] _01_;
  (* src = "./src/serie_paralelo_idle.v:51" *)
  wire _02_;
  (* src = "./src/serie_paralelo_idle.v:51" *)
  wire _03_;
  (* src = "./src/serie_paralelo_idle.v:61" *)
  (* unused_bits = "4" *)
  wire [31:0] _04_;
  wire [3:0] _05_;
  wire [1:0] _06_;
  wire [15:0] _07_;
  wire [7:0] _08_;
  wire [7:0] _09_;
  wire _10_;
  wire [3:0] _11_;
  wire [3:0] _12_;
  (* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _13_;
  (* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _14_;
  wire [31:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  (* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)
  wire _19_;
  (* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)
  wire _20_;
  (* src = "./src/serie_paralelo_idle.v:36" *)
  wire [3:0] BC_counter;
  (* src = "./src/serie_paralelo_idle.v:37" *)
  wire active;
  (* src = "./src/serie_paralelo_idle.v:28" *)
  input clk32f;
  (* src = "./src/serie_paralelo_idle.v:29" *)
  input clk4f;
  (* src = "./src/serie_paralelo_idle.v:27" *)
  input in;
  (* src = "./src/serie_paralelo_idle.v:35" *)
  wire [7:0] register;
  (* src = "./src/serie_paralelo_idle.v:30" *)
  input reset;
  (* src = "./src/serie_paralelo_idle.v:32" *)
  output valido;
  assign _06_[1] = _05_[2] |(* src = "./src/serie_paralelo_idle.v:59" *)  _05_[3];
  assign _05_[0] = register[0] |(* src = "./src/serie_paralelo_idle.v:68" *)  register[1];
  assign _05_[1] = _09_[2] |(* src = "./src/serie_paralelo_idle.v:68" *)  _09_[3];
  assign _05_[2] = _09_[4] |(* src = "./src/serie_paralelo_idle.v:68" *)  _09_[5];
  assign _05_[3] = register[6] |(* src = "./src/serie_paralelo_idle.v:68" *)  _09_[7];
  assign _06_[0] = _05_[0] |(* src = "./src/serie_paralelo_idle.v:68" *)  _05_[1];
  assign _10_ = _06_[0] |(* src = "./src/serie_paralelo_idle.v:68" *)  _06_[1];
  assign _07_[0] = _04_[0] &(* src = "./src/serie_paralelo_idle.v:87" *)  _15_[1];
  assign _08_[0] = _07_[0] &(* src = "./src/serie_paralelo_idle.v:87" *)  _07_[1];
  assign active = _17_ | _08_[0];
  assign _03_ = active &(* src = "./src/serie_paralelo_idle.v:68" *)  _10_;
  assign _12_[0] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[0] : _11_[0];
  assign _12_[1] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[1] : _11_[1];
  assign _12_[2] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[2] : _11_[2];
  assign _12_[3] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[3] : _11_[3];
  assign _02_ = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _03_ : 1'h0;
  assign _11_[0] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[0] : _04_[0];
  assign _11_[1] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[1] : _04_[1];
  assign _11_[2] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[2] : _04_[2];
  assign _11_[3] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[3] : _04_[3];
  assign _00_[0] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[3] : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) in : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[0] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[1] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[2] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[3] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[4] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[5] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[6] : 1'h0;
  assign _17_ = ~(* src = "./src/serie_paralelo_idle.v:87" *) _18_;
  assign _16_ = ~(* src = "./src/serie_paralelo_idle.v:87" *) _14_[31];
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _55_ (
    .C(clk4f),
    .D(_00_[0]),
    .Q(BC_counter[0])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _56_ (
    .C(clk4f),
    .D(_00_[1]),
    .Q(BC_counter[1])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _57_ (
    .C(clk4f),
    .D(_00_[2]),
    .Q(BC_counter[2])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _58_ (
    .C(clk4f),
    .D(_00_[3]),
    .Q(BC_counter[3])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _59_ (
    .C(clk4f),
    .D(_02_),
    .Q(valido)
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _60_ (
    .C(clk32f),
    .D(_01_[0]),
    .Q(register[0])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _61_ (
    .C(clk32f),
    .D(_01_[1]),
    .Q(register[1])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _62_ (
    .C(clk32f),
    .D(_01_[2]),
    .Q(register[2])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _63_ (
    .C(clk32f),
    .D(_01_[3]),
    .Q(register[3])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _64_ (
    .C(clk32f),
    .D(_01_[4]),
    .Q(register[4])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _65_ (
    .C(clk32f),
    .D(_01_[5]),
    .Q(register[5])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _66_ (
    .C(clk32f),
    .D(_01_[6]),
    .Q(register[6])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _67_ (
    .C(clk32f),
    .D(_01_[7]),
    .Q(register[7])
  );
  assign _09_[2] = register[2] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[3] = register[3] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[4] = register[4] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[5] = register[5] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[7] = register[7] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _18_ = _16_ | _08_[0];
  assign _04_[1] = BC_counter[1] ^(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  BC_counter[0];
  assign _04_[2] = BC_counter[2] ^(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  _13_[1];
  assign _04_[3] = BC_counter[3] ^(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  _13_[2];
  assign _04_[0] = BC_counter[0] ^(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _15_[1] = BC_counter[1] ^(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _15_[3] = BC_counter[3] ^(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _13_[1] = BC_counter[1] &(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:221" *)  BC_counter[0];
  assign _13_[2] = BC_counter[2] &(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:229" *)  _13_[1];
  assign _19_ = _15_[1] &(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _14_[0];
  assign _20_ = _07_[1] &(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _14_[1];
  assign _07_[1] = _15_[3] &(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:222" *)  BC_counter[2];
  assign _14_[0] = BC_counter[0] |(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:212" *)  _04_[0];
  assign _14_[1] = BC_counter[1] |(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _19_;
  assign _14_[31] = BC_counter[3] |(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _20_;
  assign _04_[31:5] = 27'h0000000;
  assign _07_[15:2] = 14'h3fff;
  assign _08_[7:1] = 7'h7f;
  assign { _09_[6], _09_[1:0] } = { register[6], register[1:0] };
  assign { _13_[31:3], _13_[0] } = { 28'h0000000, _04_[4], BC_counter[0] };
  assign _14_[30:3] = { _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31] };
  assign { _15_[31:4], _15_[2], _15_[0] } = { 28'hfffffff, BC_counter[2], _04_[0] };
endmodule
