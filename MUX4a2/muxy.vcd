$date
	Wed May 20 15:55:53 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module bancoPruebas $end
$var wire 1 ! reset $end
$var wire 9 " out1 [8:0] $end
$var wire 9 # out0 [8:0] $end
$var wire 9 $ in3 [8:0] $end
$var wire 9 % in2 [8:0] $end
$var wire 9 & in1 [8:0] $end
$var wire 9 ' in0 [8:0] $end
$var wire 1 ( clk $end
$scope module Tb $end
$var wire 9 ) out1 [8:0] $end
$var wire 9 * out0 [8:0] $end
$var reg 1 ( clk $end
$var reg 4 + count0 [3:0] $end
$var reg 4 , count1 [3:0] $end
$var reg 9 - in0 [8:0] $end
$var reg 9 . in1 [8:0] $end
$var reg 9 / in2 [8:0] $end
$var reg 9 0 in3 [8:0] $end
$var reg 1 ! reset $end
$upscope $end
$scope module mux_behav $end
$var wire 1 ( clk $end
$var wire 9 1 in0 [8:0] $end
$var wire 9 2 in1 [8:0] $end
$var wire 9 3 in2 [8:0] $end
$var wire 9 4 in3 [8:0] $end
$var wire 1 ! reset $end
$var wire 9 5 wout1 [8:0] $end
$var wire 9 6 wout0 [8:0] $end
$var reg 9 7 out0 [8:0] $end
$var reg 9 8 out1 [8:0] $end
$scope module mux_A $end
$var wire 1 ( clk $end
$var wire 9 9 in0 [8:0] $end
$var wire 9 : in1 [8:0] $end
$var wire 1 ! reset $end
$var reg 9 ; out [8:0] $end
$var reg 1 < selector $end
$upscope $end
$scope module mux_B $end
$var wire 1 ( clk $end
$var wire 9 = in0 [8:0] $end
$var wire 9 > in1 [8:0] $end
$var wire 1 ! reset $end
$var reg 9 ? out [8:0] $end
$var reg 1 @ selector $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x@
bx ?
b1 >
b10101011 =
x<
bx ;
b1 :
b11111111 9
bx 8
bx 7
bx 6
bx 5
b1 4
b10101011 3
b1 2
b11111111 1
b1 0
b10101011 /
b1 .
b11111111 -
b0 ,
b0 +
bx *
bx )
0(
b11111111 '
b1 &
b10101011 %
b1 $
bx #
bx "
x!
$end
#2000
0!
#10000
b1 ,
b1 +
b10101011 "
b10101011 )
b10101011 8
b11111111 #
b11111111 *
b11111111 7
b11111111 6
b11111111 ;
b10101011 5
b10101011 ?
b111111110 '
b111111110 -
b111111110 1
b111111110 9
1!
1(
#20000
0(
#30000
b11111110 #
b11111110 *
b11111110 7
b10000 $
b10000 0
b10000 4
b10000 >
b1010100 %
b1010100 /
b1010100 3
b1010100 =
b1010100 '
b1010100 -
b1010100 1
b1010100 9
b0 &
b0 .
b0 2
b0 :
b11111110 6
b11111110 ;
1(
#40000
0(
#50000
b10101010 "
b10101010 )
b10101010 8
b10101010 5
b10101010 ?
b10001 $
b10001 0
b10001 4
b10001 >
b100001 %
b100001 /
b100001 3
b100001 =
b1000001 &
b1000001 .
b1000001 2
b1000001 :
b10000001 '
b10000001 -
b10000001 1
b10000001 9
1(
#60000
0(
#70000
b10 ,
b10 +
b100001 "
b100001 )
b100001 8
b10000001 #
b10000001 *
b10000001 7
b100001 5
b100001 ?
b10000001 6
b10000001 ;
1(
#80000
0(
#90000
1(
#100000
0(
#110000
1(
#120000
0(
#130000
b111111110 '
b111111110 -
b111111110 1
b111111110 9
1(
#140000
0(
#150000
b10000000 #
b10000000 *
b10000000 7
b10000 $
b10000 0
b10000 4
b10000 >
b1010100 %
b1010100 /
b1010100 3
b1010100 =
b1010100 '
b1010100 -
b1010100 1
b1010100 9
b1000000 &
b1000000 .
b1000000 2
b1000000 :
b10000000 6
b10000000 ;
1(
#160000
0(
#170000
b100000 "
b100000 )
b100000 8
b100000 5
b100000 ?
b10001 $
b10001 0
b10001 4
b10001 >
b100001 %
b100001 /
b100001 3
b100001 =
b1000001 &
b1000001 .
b1000001 2
b1000001 :
b10000001 '
b10000001 -
b10000001 1
b10000001 9
1(
#180000
0(
#190000
b11 ,
b11 +
b100001 "
b100001 )
b100001 8
b10000001 #
b10000001 *
b10000001 7
b100001 5
b100001 ?
b10000001 6
b10000001 ;
1(
#200000
0(
#210000
1(
#220000
0(
#230000
1(
