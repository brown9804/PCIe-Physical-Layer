/* Generated by Yosys 0.9 (git sha1 UNKNOWN, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os) */

(* src = "./src/demux1x2_behav_syn.v:22" *)
module demux1x2_behav_syn(in, clk, reset, valid, out0, out1, valid_out);
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  wire [7:0] _00_;
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  wire [7:0] _01_;
  (* src = "./src/demux1x2_behav_syn.v:41" *)
  wire _02_;
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  wire [1:0] _03_;
  (* src = "./src/demux1x2_behav_syn.v:45" *)
  wire _04_;
  wire _05_;
  wire _06_;
  wire [7:0] _07_;
  wire [7:0] _08_;
  wire [7:0] _09_;
  wire [7:0] _10_;
  (* src = "./src/demux1x2_behav_syn.v:25" *)
  input clk;
  (* src = "./src/demux1x2_behav_syn.v:24" *)
  input [7:0] in;
  (* src = "./src/demux1x2_behav_syn.v:37" *)
  wire [7:0] node0;
  (* src = "./src/demux1x2_behav_syn.v:38" *)
  wire [7:0] node1;
  (* src = "./src/demux1x2_behav_syn.v:30" *)
  output [7:0] out0;
  (* src = "./src/demux1x2_behav_syn.v:31" *)
  output [7:0] out1;
  (* src = "./src/demux1x2_behav_syn.v:26" *)
  input reset;
  (* src = "./src/demux1x2_behav_syn.v:36" *)
  wire selector;
  (* src = "./src/demux1x2_behav_syn.v:27" *)
  input valid;
  (* src = "./src/demux1x2_behav_syn.v:32" *)
  output [1:0] valid_out;
  assign _05_ = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) valid_out[1] : valid;
  assign _03_[1] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _05_ : valid_out[1];
  assign _07_[0] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[0] : node0[0];
  assign _07_[1] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[1] : node0[1];
  assign _07_[2] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[2] : node0[2];
  assign _07_[3] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[3] : node0[3];
  assign _07_[4] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[4] : node0[4];
  assign _07_[5] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[5] : node0[5];
  assign _07_[6] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[6] : node0[6];
  assign _07_[7] = valid ? (* src = "./src/demux1x2_behav_syn.v:55" *) in[7] : node0[7];
  assign _06_ = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) valid : valid_out[0];
  assign _03_[0] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _06_ : valid_out[0];
  assign _08_[0] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[0] : node0[0];
  assign _08_[1] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[1] : node0[1];
  assign _08_[2] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[2] : node0[2];
  assign _08_[3] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[3] : node0[3];
  assign _08_[4] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[4] : node0[4];
  assign _08_[5] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[5] : node0[5];
  assign _08_[6] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[6] : node0[6];
  assign _08_[7] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) _07_[7] : node0[7];
  assign _00_[0] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _08_[7] : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/demux1x2_behav_syn.v:50" *) _10_[7] : 1'h0;
  assign _09_[0] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[0] : node1[0];
  assign _09_[1] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[1] : node1[1];
  assign _09_[2] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[2] : node1[2];
  assign _09_[3] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[3] : node1[3];
  assign _09_[4] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[4] : node1[4];
  assign _09_[5] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[5] : node1[5];
  assign _09_[6] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[6] : node1[6];
  assign _09_[7] = valid ? (* src = "./src/demux1x2_behav_syn.v:63" *) in[7] : node1[7];
  assign _10_[0] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[0] : _09_[0];
  assign _10_[1] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[1] : _09_[1];
  assign _10_[2] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[2] : _09_[2];
  assign _10_[3] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[3] : _09_[3];
  assign _10_[4] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[4] : _09_[4];
  assign _10_[5] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[5] : _09_[5];
  assign _10_[6] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[6] : _09_[6];
  assign _10_[7] = selector ? (* src = "./src/demux1x2_behav_syn.v:54" *) node1[7] : _09_[7];
  assign _02_ = reset ? (* src = "./src/demux1x2_behav_syn.v:42" *) _04_ : 1'h0;
  assign _04_ = ~(* src = "./src/demux1x2_behav_syn.v:45" *) selector;
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _65_ (
    .C(clk),
    .D(node0[0]),
    .Q(out0[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _66_ (
    .C(clk),
    .D(node0[1]),
    .Q(out0[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _67_ (
    .C(clk),
    .D(node0[2]),
    .Q(out0[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _68_ (
    .C(clk),
    .D(node0[3]),
    .Q(out0[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _69_ (
    .C(clk),
    .D(node0[4]),
    .Q(out0[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _70_ (
    .C(clk),
    .D(node0[5]),
    .Q(out0[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _71_ (
    .C(clk),
    .D(node0[6]),
    .Q(out0[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _72_ (
    .C(clk),
    .D(node0[7]),
    .Q(out0[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _73_ (
    .C(clk),
    .D(node1[0]),
    .Q(out1[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _74_ (
    .C(clk),
    .D(node1[1]),
    .Q(out1[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _75_ (
    .C(clk),
    .D(node1[2]),
    .Q(out1[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _76_ (
    .C(clk),
    .D(node1[3]),
    .Q(out1[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _77_ (
    .C(clk),
    .D(node1[4]),
    .Q(out1[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _78_ (
    .C(clk),
    .D(node1[5]),
    .Q(out1[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _79_ (
    .C(clk),
    .D(node1[6]),
    .Q(out1[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:75" *)
  DFF _80_ (
    .C(clk),
    .D(node1[7]),
    .Q(out1[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _81_ (
    .C(clk),
    .D(_03_[0]),
    .Q(valid_out[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _82_ (
    .C(clk),
    .D(_03_[1]),
    .Q(valid_out[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _83_ (
    .C(clk),
    .D(_00_[0]),
    .Q(node0[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _84_ (
    .C(clk),
    .D(_00_[1]),
    .Q(node0[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _85_ (
    .C(clk),
    .D(_00_[2]),
    .Q(node0[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _86_ (
    .C(clk),
    .D(_00_[3]),
    .Q(node0[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _87_ (
    .C(clk),
    .D(_00_[4]),
    .Q(node0[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _88_ (
    .C(clk),
    .D(_00_[5]),
    .Q(node0[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _89_ (
    .C(clk),
    .D(_00_[6]),
    .Q(node0[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _90_ (
    .C(clk),
    .D(_00_[7]),
    .Q(node0[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _91_ (
    .C(clk),
    .D(_01_[0]),
    .Q(node1[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _92_ (
    .C(clk),
    .D(_01_[1]),
    .Q(node1[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _93_ (
    .C(clk),
    .D(_01_[2]),
    .Q(node1[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _94_ (
    .C(clk),
    .D(_01_[3]),
    .Q(node1[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _95_ (
    .C(clk),
    .D(_01_[4]),
    .Q(node1[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _96_ (
    .C(clk),
    .D(_01_[5]),
    .Q(node1[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _97_ (
    .C(clk),
    .D(_01_[6]),
    .Q(node1[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:49" *)
  DFF _98_ (
    .C(clk),
    .D(_01_[7]),
    .Q(node1[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:41" *)
  DFF _99_ (
    .C(clk),
    .D(_02_),
    .Q(selector)
  );
endmodule

(* src = "./src/demux1x4_behav_syn.v:25" *)
module demux1x4_behav_syn(clk1f, clk2f, clk4f, reset, in, valid, out0, out1, out2, out3, valid_out);
  (* src = "./src/demux1x4_behav_syn.v:26" *)
  input clk1f;
  (* src = "./src/demux1x4_behav_syn.v:27" *)
  input clk2f;
  (* src = "./src/demux1x4_behav_syn.v:28" *)
  input clk4f;
  (* src = "./src/demux1x4_behav_syn.v:32" *)
  input [7:0] in;
  (* src = "./src/demux1x4_behav_syn.v:36" *)
  output [7:0] out0;
  (* src = "./src/demux1x4_behav_syn.v:37" *)
  output [7:0] out1;
  (* src = "./src/demux1x4_behav_syn.v:38" *)
  output [7:0] out2;
  (* src = "./src/demux1x4_behav_syn.v:39" *)
  output [7:0] out3;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out0;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out1;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out2;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out3;
  (* src = "./src/demux1x4_behav_syn.v:29" *)
  input reset;
  (* src = "./src/demux1x4_behav_syn.v:50" *)
  wire [3:0] v_out;
  (* src = "./src/demux1x4_behav_syn.v:33" *)
  input valid;
  (* src = "./src/demux1x4_behav_syn.v:47" *)
  wire [1:0] valid_12;
  (* src = "./src/demux1x4_behav_syn.v:47" *)
  wire [1:0] valid_24;
  (* src = "./src/demux1x4_behav_syn.v:40" *)
  output [3:0] valid_out;
  (* src = "./src/demux1x4_behav_syn.v:50" *)
  wire [3:0] valid_out24;
  (* src = "./src/demux1x4_behav_syn.v:46" *)
  wire [7:0] x_0;
  (* src = "./src/demux1x4_behav_syn.v:46" *)
  wire [7:0] x_1;
  (* src = "./src/demux1x4_behav_syn.v:48" *)
  wire [7:0] x_2;
  (* src = "./src/demux1x4_behav_syn.v:48" *)
  wire [7:0] x_3;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] x_4;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] x_5;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] x_6;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] x_7;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:54" *)
  demux1x2_behav_syn demux12 (
    .clk(clk4f),
    .in(in),
    .out0(x_0),
    .out1(x_1),
    .reset(reset),
    .valid(valid),
    .valid_out(valid_12)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:91" *)
  demux2x4_behav_syn demux_24 (
    .clk(clk2f),
    .in0(x_2),
    .in1(x_3),
    .out0(x_4),
    .out1(x_5),
    .out2(x_6),
    .out3(x_7),
    .reset(reset),
    .valid(valid_24),
    .valid_out(valid_out24)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:106" *)
  ff4in4o_syn flops14 (
    .clkf(clk1f),
    .in0(x_4),
    .in1(x_5),
    .in2(x_6),
    .in3(x_7),
    .out0(pre_out0),
    .out1(pre_out1),
    .out2(pre_out2),
    .out3(pre_out3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:66" *)
  ff2in2o_syn flops1_2 (
    .clkf(clk2f),
    .in0(x_0),
    .in1(x_1),
    .out0(x_2),
    .out1(x_3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:76" *)
  ff4in4o_synvalid flops1_2valid (
    .clkf(clk2f),
    .in0(valid_12[0]),
    .in1(valid_12[1]),
    .out0(valid_24[0]),
    .out1(valid_24[1]),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:121" *)
  ff4in4o_synvalid flops2_4valid (
    .clkf(clk1f),
    .in0(valid_out24[0]),
    .in1(valid_out24[1]),
    .in2(valid_out24[2]),
    .in3(valid_out24[3]),
    .out0(v_out[0]),
    .out1(v_out[1]),
    .out2(v_out[2]),
    .out3(v_out[3]),
    .reset(reset)
  );
  assign out0 = pre_out0;
  assign out1 = pre_out1;
  assign out2 = pre_out2;
  assign out3 = pre_out3;
  assign valid_out = v_out;
endmodule

(* src = "./src/demux2x4_behav_syn.v:22" *)
module demux2x4_behav_syn(clk, reset, in0, in1, valid, out0, out1, out2, out3, valid_out);
  (* src = "./src/demux2x4_behav_syn.v:24" *)
  input clk;
  (* src = "./src/demux2x4_behav_syn.v:28" *)
  input [7:0] in0;
  (* src = "./src/demux2x4_behav_syn.v:29" *)
  input [7:0] in1;
  (* src = "./src/demux2x4_behav_syn.v:34" *)
  output [7:0] out0;
  (* src = "./src/demux2x4_behav_syn.v:35" *)
  output [7:0] out1;
  (* src = "./src/demux2x4_behav_syn.v:36" *)
  output [7:0] out2;
  (* src = "./src/demux2x4_behav_syn.v:37" *)
  output [7:0] out3;
  (* src = "./src/demux2x4_behav_syn.v:42" *)
  wire [7:0] pre_out0;
  (* src = "./src/demux2x4_behav_syn.v:43" *)
  wire [7:0] pre_out1;
  (* src = "./src/demux2x4_behav_syn.v:44" *)
  wire [7:0] pre_out2;
  (* src = "./src/demux2x4_behav_syn.v:45" *)
  wire [7:0] pre_out3;
  (* src = "./src/demux2x4_behav_syn.v:25" *)
  input reset;
  (* src = "./src/demux2x4_behav_syn.v:47" *)
  wire [1:0] v_out0;
  (* src = "./src/demux2x4_behav_syn.v:48" *)
  wire [1:0] v_out1;
  (* src = "./src/demux2x4_behav_syn.v:30" *)
  input [1:0] valid;
  (* src = "./src/demux2x4_behav_syn.v:38" *)
  output [3:0] valid_out;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux2x4_behav_syn.v:51" *)
  demux1x2_behav_syn demux12_0 (
    .clk(clk),
    .in(in0),
    .out0(pre_out0),
    .out1(pre_out1),
    .reset(reset),
    .valid(valid[0]),
    .valid_out(v_out0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux2x4_behav_syn.v:62" *)
  demux1x2_behav_syn demux12_1 (
    .clk(clk),
    .in(in1),
    .out0(pre_out2),
    .out1(pre_out3),
    .reset(reset),
    .valid(valid[1]),
    .valid_out(v_out1)
  );
  assign out0 = pre_out0;
  assign out1 = pre_out1;
  assign out2 = pre_out2;
  assign out3 = pre_out3;
  assign valid_out = { v_out1, v_out0 };
endmodule

(* src = "./src/ff2in2o_syn.v:8" *)
module ff2in2o_syn(clkf, reset, in0, in1, out0, out1);
  (* src = "./src/ff2in2o_syn.v:19" *)
  wire [7:0] _00_;
  (* src = "./src/ff2in2o_syn.v:19" *)
  wire [7:0] _01_;
  (* src = "./src/ff2in2o_syn.v:9" *)
  input clkf;
  (* src = "./src/ff2in2o_syn.v:12" *)
  input [7:0] in0;
  (* src = "./src/ff2in2o_syn.v:13" *)
  input [7:0] in1;
  (* src = "./src/ff2in2o_syn.v:15" *)
  output [7:0] out0;
  (* src = "./src/ff2in2o_syn.v:16" *)
  output [7:0] out1;
  (* src = "./src/ff2in2o_syn.v:10" *)
  input reset;
  assign _01_[0] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in1[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/ff2in2o_syn.v:23" *) in0[7] : 1'h0;
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _18_ (
    .C(clkf),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _19_ (
    .C(clkf),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _20_ (
    .C(clkf),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _21_ (
    .C(clkf),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _22_ (
    .C(clkf),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _23_ (
    .C(clkf),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _24_ (
    .C(clkf),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _25_ (
    .C(clkf),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _26_ (
    .C(clkf),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _27_ (
    .C(clkf),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _28_ (
    .C(clkf),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _29_ (
    .C(clkf),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _30_ (
    .C(clkf),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _31_ (
    .C(clkf),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _32_ (
    .C(clkf),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "./src/ff2in2o_syn.v:19" *)
  DFF _33_ (
    .C(clkf),
    .D(_01_[7]),
    .Q(out1[7])
  );
endmodule

(* src = "./src/ff4in4o_syn.v:8" *)
module ff4in4o_syn(clkf, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _00_;
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _01_;
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _02_;
  (* src = "./src/ff4in4o_syn.v:23" *)
  wire [7:0] _03_;
  (* src = "./src/ff4in4o_syn.v:9" *)
  input clkf;
  (* src = "./src/ff4in4o_syn.v:12" *)
  input [7:0] in0;
  (* src = "./src/ff4in4o_syn.v:13" *)
  input [7:0] in1;
  (* src = "./src/ff4in4o_syn.v:14" *)
  input [7:0] in2;
  (* src = "./src/ff4in4o_syn.v:15" *)
  input [7:0] in3;
  (* src = "./src/ff4in4o_syn.v:17" *)
  output [7:0] out0;
  (* src = "./src/ff4in4o_syn.v:18" *)
  output [7:0] out1;
  (* src = "./src/ff4in4o_syn.v:19" *)
  output [7:0] out2;
  (* src = "./src/ff4in4o_syn.v:20" *)
  output [7:0] out3;
  (* src = "./src/ff4in4o_syn.v:10" *)
  input reset;
  assign _03_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[0] : 1'h0;
  assign _03_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[1] : 1'h0;
  assign _03_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[2] : 1'h0;
  assign _03_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[3] : 1'h0;
  assign _03_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[4] : 1'h0;
  assign _03_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[5] : 1'h0;
  assign _03_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[6] : 1'h0;
  assign _03_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in3[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in0[7] : 1'h0;
  assign _02_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[0] : 1'h0;
  assign _02_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[1] : 1'h0;
  assign _02_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[2] : 1'h0;
  assign _02_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[3] : 1'h0;
  assign _02_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[4] : 1'h0;
  assign _02_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[5] : 1'h0;
  assign _02_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[6] : 1'h0;
  assign _02_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in2[7] : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/ff4in4o_syn.v:27" *) in1[7] : 1'h0;
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _36_ (
    .C(clkf),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _37_ (
    .C(clkf),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _38_ (
    .C(clkf),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _39_ (
    .C(clkf),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _40_ (
    .C(clkf),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _41_ (
    .C(clkf),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _42_ (
    .C(clkf),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _43_ (
    .C(clkf),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _44_ (
    .C(clkf),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _45_ (
    .C(clkf),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _46_ (
    .C(clkf),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _47_ (
    .C(clkf),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _48_ (
    .C(clkf),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _49_ (
    .C(clkf),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _50_ (
    .C(clkf),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _51_ (
    .C(clkf),
    .D(_01_[7]),
    .Q(out1[7])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _52_ (
    .C(clkf),
    .D(_02_[0]),
    .Q(out2[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _53_ (
    .C(clkf),
    .D(_02_[1]),
    .Q(out2[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _54_ (
    .C(clkf),
    .D(_02_[2]),
    .Q(out2[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _55_ (
    .C(clkf),
    .D(_02_[3]),
    .Q(out2[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _56_ (
    .C(clkf),
    .D(_02_[4]),
    .Q(out2[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _57_ (
    .C(clkf),
    .D(_02_[5]),
    .Q(out2[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _58_ (
    .C(clkf),
    .D(_02_[6]),
    .Q(out2[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _59_ (
    .C(clkf),
    .D(_02_[7]),
    .Q(out2[7])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _60_ (
    .C(clkf),
    .D(_03_[0]),
    .Q(out3[0])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _61_ (
    .C(clkf),
    .D(_03_[1]),
    .Q(out3[1])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _62_ (
    .C(clkf),
    .D(_03_[2]),
    .Q(out3[2])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _63_ (
    .C(clkf),
    .D(_03_[3]),
    .Q(out3[3])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _64_ (
    .C(clkf),
    .D(_03_[4]),
    .Q(out3[4])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _65_ (
    .C(clkf),
    .D(_03_[5]),
    .Q(out3[5])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _66_ (
    .C(clkf),
    .D(_03_[6]),
    .Q(out3[6])
  );
  (* src = "./src/ff4in4o_syn.v:23" *)
  DFF _67_ (
    .C(clkf),
    .D(_03_[7]),
    .Q(out3[7])
  );
endmodule

(* src = "./src/ff4in4o_synvalid.v:6" *)
module ff4in4o_synvalid(clkf, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _00_;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _01_;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _02_;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  wire _03_;
  (* src = "./src/ff4in4o_synvalid.v:7" *)
  input clkf;
  (* src = "./src/ff4in4o_synvalid.v:10" *)
  input in0;
  (* src = "./src/ff4in4o_synvalid.v:11" *)
  input in1;
  (* src = "./src/ff4in4o_synvalid.v:12" *)
  input in2;
  (* src = "./src/ff4in4o_synvalid.v:13" *)
  input in3;
  (* src = "./src/ff4in4o_synvalid.v:15" *)
  output out0;
  (* src = "./src/ff4in4o_synvalid.v:16" *)
  output out1;
  (* src = "./src/ff4in4o_synvalid.v:17" *)
  output out2;
  (* src = "./src/ff4in4o_synvalid.v:18" *)
  output out3;
  (* src = "./src/ff4in4o_synvalid.v:8" *)
  input reset;
  assign _02_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in2 : 1'h0;
  assign _03_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in3 : 1'h0;
  assign _01_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in1 : 1'h0;
  assign _00_ = reset ? (* src = "./src/ff4in4o_synvalid.v:25" *) in0 : 1'h0;
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _08_ (
    .C(clkf),
    .D(_00_),
    .Q(out0)
  );
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _09_ (
    .C(clkf),
    .D(_01_),
    .Q(out1)
  );
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _10_ (
    .C(clkf),
    .D(_02_),
    .Q(out2)
  );
  (* src = "./src/ff4in4o_synvalid.v:21" *)
  DFF _11_ (
    .C(clkf),
    .D(_03_),
    .Q(out3)
  );
endmodule

(* src = "./src/paralelltoserial_IDLE.v:7" *)
module paralelo_a_serial_IDLE_syn(active, reset, clk32f, out);
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  wire _00_;
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  wire _01_;
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  wire _02_;
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  wire [2:0] _03_;
  (* src = "./src/paralelltoserial_IDLE.v:40" *)
  (* unused_bits = "3" *)
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire [3:0] _09_;
  wire [1:0] _10_;
  wire [3:0] _11_;
  wire [1:0] _12_;
  wire _13_;
  wire [2:0] _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  (* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:432" *)
  wire [7:0] _22_;
  (* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:428" *)
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  (* src = "./src/paralelltoserial_IDLE.v:40|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _29_;
  (* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:445" *)
  wire _30_;
  (* src = "./src/paralelltoserial_IDLE.v:10" *)
  input active;
  (* src = "./src/paralelltoserial_IDLE.v:12" *)
  input clk32f;
  (* src = "./src/paralelltoserial_IDLE.v:19" *)
  wire dataflux1;
  (* src = "./src/paralelltoserial_IDLE.v:19" *)
  wire dataflux2;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle0;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle1;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle2;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle3;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle4;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle5;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle6;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire idle7;
  (* src = "./src/paralelltoserial_IDLE.v:13" *)
  output out;
  (* src = "./src/paralelltoserial_IDLE.v:11" *)
  input reset;
  (* src = "./src/paralelltoserial_IDLE.v:20" *)
  wire [2:0] selector;
  assign _15_ = _05_ |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41" *)  _14_[2];
  assign _06_ = selector[0] |(* src = "./src/paralelltoserial_IDLE.v:48|./src/paralelltoserial_IDLE.v:41" *)  _14_[1];
  assign _16_ = _06_ |(* src = "./src/paralelltoserial_IDLE.v:48|./src/paralelltoserial_IDLE.v:41" *)  _14_[2];
  assign _07_ = _04_[0] |(* src = "./src/paralelltoserial_IDLE.v:47|./src/paralelltoserial_IDLE.v:41" *)  selector[1];
  assign _17_ = _07_ |(* src = "./src/paralelltoserial_IDLE.v:47|./src/paralelltoserial_IDLE.v:41" *)  _14_[2];
  assign _18_ = _08_ |(* src = "./src/paralelltoserial_IDLE.v:46|./src/paralelltoserial_IDLE.v:41" *)  _14_[2];
  assign _05_ = _04_[0] |(* src = "./src/paralelltoserial_IDLE.v:45|./src/paralelltoserial_IDLE.v:41" *)  _14_[1];
  assign _19_ = _05_ |(* src = "./src/paralelltoserial_IDLE.v:45|./src/paralelltoserial_IDLE.v:41" *)  selector[2];
  assign _20_ = _06_ |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:41" *)  selector[2];
  assign _21_ = _07_ |(* src = "./src/paralelltoserial_IDLE.v:43|./src/paralelltoserial_IDLE.v:41" *)  selector[2];
  assign _09_[1] = _22_[2] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:441" *)  _22_[3];
  assign _09_[2] = _22_[4] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:441" *)  _22_[5];
  assign _09_[3] = _22_[6] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:441" *)  _22_[7];
  assign _10_[1] = _09_[2] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:441" *)  _09_[3];
  assign _23_ = _09_[1] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:441" *)  _10_[1];
  assign _11_[0] = _25_ |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:445" *)  _26_;
  assign _11_[3] = _27_ |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:445" *)  _28_;
  assign _12_[0] = _11_[0] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:445" *)  _09_[1];
  assign _12_[1] = _09_[2] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:445" *)  _11_[3];
  assign _30_ = _12_[0] |(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:445" *)  _12_[1];
  assign _08_ = selector[0] |(* src = "./src/paralelltoserial_IDLE.v:42|./src/paralelltoserial_IDLE.v:41" *)  selector[1];
  assign _13_ = _08_ |(* src = "./src/paralelltoserial_IDLE.v:42|./src/paralelltoserial_IDLE.v:41" *)  selector[2];
  assign _25_ = ~(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41" *) _15_;
  assign _26_ = ~(* src = "./src/paralelltoserial_IDLE.v:48|./src/paralelltoserial_IDLE.v:41" *) _16_;
  assign _22_[2] = ~(* src = "./src/paralelltoserial_IDLE.v:47|./src/paralelltoserial_IDLE.v:41" *) _17_;
  assign _22_[3] = ~(* src = "./src/paralelltoserial_IDLE.v:46|./src/paralelltoserial_IDLE.v:41" *) _18_;
  assign _22_[4] = ~(* src = "./src/paralelltoserial_IDLE.v:45|./src/paralelltoserial_IDLE.v:41" *) _19_;
  assign _22_[5] = ~(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:41" *) _20_;
  assign _27_ = ~(* src = "./src/paralelltoserial_IDLE.v:43|./src/paralelltoserial_IDLE.v:41" *) _21_;
  assign _28_ = ~(* src = "./src/paralelltoserial_IDLE.v:42|./src/paralelltoserial_IDLE.v:41" *) _13_;
  assign _01_ = reset ? (* src = "./src/paralelltoserial_IDLE.v:31" *) dataflux1 : 1'h0;
  assign _00_ = reset ? (* src = "./src/paralelltoserial_IDLE.v:31" *) _24_ : 1'h0;
  assign idle0 = ~(* src = "./src/paralelltoserial_IDLE.v:24" *) active;
  assign _02_ = reset ? (* src = "./src/paralelltoserial_IDLE.v:31" *) dataflux2 : 1'h0;
  assign _03_[0] = reset ? (* src = "./src/paralelltoserial_IDLE.v:31" *) _04_[0] : 1'h1;
  assign _03_[1] = reset ? (* src = "./src/paralelltoserial_IDLE.v:31" *) _04_[1] : 1'h1;
  assign _03_[2] = reset ? (* src = "./src/paralelltoserial_IDLE.v:31" *) _04_[2] : 1'h1;
  assign _24_ = _30_ ? (* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:445" *) _23_ : 1'hx;
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  DFF _69_ (
    .C(clk32f),
    .D(_03_[0]),
    .Q(selector[0])
  );
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  DFF _70_ (
    .C(clk32f),
    .D(_03_[1]),
    .Q(selector[1])
  );
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  DFF _71_ (
    .C(clk32f),
    .D(_03_[2]),
    .Q(selector[2])
  );
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  DFF _72_ (
    .C(clk32f),
    .D(_02_),
    .Q(out)
  );
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  DFF _73_ (
    .C(clk32f),
    .D(_00_),
    .Q(dataflux1)
  );
  (* src = "./src/paralelltoserial_IDLE.v:30" *)
  DFF _74_ (
    .C(clk32f),
    .D(_01_),
    .Q(dataflux2)
  );
  assign _14_[2] = selector[2] ^(* src = "./src/paralelltoserial_IDLE.v:46|./src/paralelltoserial_IDLE.v:41" *)  1'h1;
  assign _14_[1] = selector[1] ^(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:41" *)  1'h1;
  assign _04_[0] = selector[0] ^(* src = "./src/paralelltoserial_IDLE.v:43|./src/paralelltoserial_IDLE.v:41" *)  1'h1;
  assign _22_[7] = idle0 &(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:434" *)  _28_;
  assign _22_[6] = active &(* src = "./src/paralelltoserial_IDLE.v:49|./src/paralelltoserial_IDLE.v:41|<techmap.v>:434" *)  _27_;
  assign _04_[1] = selector[1] ^(* src = "./src/paralelltoserial_IDLE.v:40|<techmap.v>:263" *)  selector[0];
  assign _04_[2] = selector[2] ^(* src = "./src/paralelltoserial_IDLE.v:40|<techmap.v>:263" *)  _29_[1];
  assign _29_[1] = selector[1] &(* src = "./src/paralelltoserial_IDLE.v:40|<techmap.v>:260|<techmap.v>:221" *)  selector[0];
  assign _04_[31:4] = 28'h0000000;
  assign _09_[0] = 1'h0;
  assign _10_[0] = _09_[1];
  assign _11_[2:1] = _09_[2:1];
  assign _14_[0] = _04_[0];
  assign _22_[1:0] = 2'h0;
  assign { _29_[31:2], _29_[0] } = { 29'h00000000, _04_[3], selector[0] };
  assign idle1 = active;
  assign idle2 = 1'h1;
  assign idle3 = 1'h1;
  assign idle4 = 1'h1;
  assign idle5 = 1'h1;
  assign idle6 = 1'h0;
  assign idle7 = 1'h0;
endmodule

(* top =  1  *)
(* src = "./src/phy_rx_syn.v:17" *)
module phy_rx_syn(clk1f, clk2f, clk4f, clk32f, reset, in, out0, out1, out2, out3, out_rx_tx, valid_out_mux14);
  (* src = "./src/phy_rx_syn.v:37" *)
  wire active_inter;
  (* src = "./src/phy_rx_syn.v:18" *)
  input clk1f;
  (* src = "./src/phy_rx_syn.v:19" *)
  input clk2f;
  (* src = "./src/phy_rx_syn.v:21" *)
  input clk32f;
  (* src = "./src/phy_rx_syn.v:20" *)
  input clk4f;
  (* src = "./src/phy_rx_syn.v:43" *)
  wire [7:0] conec0;
  (* src = "./src/phy_rx_syn.v:43" *)
  wire [7:0] conec1;
  (* src = "./src/phy_rx_syn.v:43" *)
  wire [7:0] conec2;
  (* src = "./src/phy_rx_syn.v:43" *)
  wire [7:0] conec3;
  (* src = "./src/phy_rx_syn.v:24" *)
  input in;
  (* src = "./src/phy_rx_syn.v:35" *)
  wire [7:0] in_demux;
  (* src = "./src/phy_rx_syn.v:26" *)
  output [7:0] out0;
  (* src = "./src/phy_rx_syn.v:27" *)
  output [7:0] out1;
  (* src = "./src/phy_rx_syn.v:28" *)
  output [7:0] out2;
  (* src = "./src/phy_rx_syn.v:29" *)
  output [7:0] out3;
  (* src = "./src/phy_rx_syn.v:30" *)
  output out_rx_tx;
  (* src = "./src/phy_rx_syn.v:22" *)
  input reset;
  (* src = "./src/phy_rx_syn.v:41" *)
  wire tx_rx;
  (* src = "./src/phy_rx_syn.v:31" *)
  output [3:0] valid_out_mux14;
  (* src = "./src/phy_rx_syn.v:39" *)
  wire validin;
  (* src = "./src/phy_rx_syn.v:44" *)
  wire [3:0] validout_conec;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_rx_syn.v:47" *)
  serieparalelo_syn c1 (
    .active(active_inter),
    .clk32f(clk32f),
    .clk4f(clk4f),
    .in(in),
    .out(in_demux),
    .reset(reset),
    .valid(validin)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_rx_syn.v:61" *)
  demux1x4_behav_syn c2 (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk4f(clk4f),
    .in(in_demux),
    .out0(conec0),
    .out1(conec1),
    .out2(conec2),
    .out3(conec3),
    .reset(reset),
    .valid(validin),
    .valid_out(validout_conec)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_rx_syn.v:77" *)
  paralelo_a_serial_IDLE_syn c3 (
    .active(active_inter),
    .clk32f(clk32f),
    .out(tx_rx),
    .reset(reset)
  );
  assign out0 = conec0;
  assign out1 = conec1;
  assign out2 = conec2;
  assign out3 = conec3;
  assign out_rx_tx = tx_rx;
  assign valid_out_mux14 = validout_conec;
endmodule

(* src = "./src/serieparalelo_syn.v:22" *)
module serieparalelo_syn(in, clk32f, clk4f, reset, out, valid, active);
  (* src = "./src/serieparalelo_syn.v:50" *)
  wire [3:0] _000_;
  (* src = "./src/serieparalelo_syn.v:50" *)
  wire [7:0] _001_;
  (* src = "./src/serieparalelo_syn.v:39" *)
  wire [7:0] _002_;
  (* src = "./src/serieparalelo_syn.v:50" *)
  wire _003_;
  (* src = "./src/serieparalelo_syn.v:50" *)
  wire _004_;
  (* src = "./src/serieparalelo_syn.v:60" *)
  (* unused_bits = "4" *)
  wire [31:0] _005_;
  wire [3:0] _006_;
  wire [1:0] _007_;
  wire [15:0] _008_;
  wire [7:0] _009_;
  wire [7:0] _010_;
  wire _011_;
  (* src = "./src/serieparalelo_syn.v:67" *)
  wire _012_;
  wire [3:0] _013_;
  wire [3:0] _014_;
  wire [7:0] _015_;
  (* src = "./src/serieparalelo_syn.v:60|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _016_;
  (* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  (* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:221" *)
  wire _022_;
  (* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:221" *)
  wire _023_;
  (* src = "./src/serieparalelo_syn.v:36" *)
  wire [3:0] BC_counter;
  (* src = "./src/serieparalelo_syn.v:32" *)
  output active;
  (* src = "./src/serieparalelo_syn.v:26" *)
  input clk32f;
  (* src = "./src/serieparalelo_syn.v:27" *)
  input clk4f;
  (* src = "./src/serieparalelo_syn.v:25" *)
  input in;
  (* src = "./src/serieparalelo_syn.v:30" *)
  output [7:0] out;
  (* src = "./src/serieparalelo_syn.v:35" *)
  wire [7:0] register;
  (* src = "./src/serieparalelo_syn.v:28" *)
  input reset;
  (* src = "./src/serieparalelo_syn.v:31" *)
  output valid;
  assign _007_[1] = _006_[2] |(* src = "./src/serieparalelo_syn.v:58" *)  _006_[3];
  assign _006_[0] = register[0] |(* src = "./src/serieparalelo_syn.v:67" *)  register[1];
  assign _006_[1] = _010_[2] |(* src = "./src/serieparalelo_syn.v:67" *)  _010_[3];
  assign _006_[2] = _010_[4] |(* src = "./src/serieparalelo_syn.v:67" *)  _010_[5];
  assign _006_[3] = register[6] |(* src = "./src/serieparalelo_syn.v:67" *)  _010_[7];
  assign _007_[0] = _006_[0] |(* src = "./src/serieparalelo_syn.v:67" *)  _006_[1];
  assign _011_ = _007_[0] |(* src = "./src/serieparalelo_syn.v:67" *)  _007_[1];
  assign _008_[0] = _005_[0] &(* src = "./src/serieparalelo_syn.v:86" *)  _018_[1];
  assign _009_[0] = _008_[0] &(* src = "./src/serieparalelo_syn.v:86" *)  _008_[1];
  assign active = _020_ | _009_[0];
  assign _012_ = active &(* src = "./src/serieparalelo_syn.v:67" *)  _011_;
  assign _004_ = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _012_ : 1'hx;
  assign _014_[0] = _011_ ? (* src = "./src/serieparalelo_syn.v:58" *) BC_counter[0] : _013_[0];
  assign _014_[1] = _011_ ? (* src = "./src/serieparalelo_syn.v:58" *) BC_counter[1] : _013_[1];
  assign _014_[2] = _011_ ? (* src = "./src/serieparalelo_syn.v:58" *) BC_counter[2] : _013_[2];
  assign _014_[3] = _011_ ? (* src = "./src/serieparalelo_syn.v:58" *) BC_counter[3] : _013_[3];
  assign _013_[0] = active ? (* src = "./src/serieparalelo_syn.v:59" *) BC_counter[0] : _005_[0];
  assign _013_[1] = active ? (* src = "./src/serieparalelo_syn.v:59" *) BC_counter[1] : _005_[1];
  assign _013_[2] = active ? (* src = "./src/serieparalelo_syn.v:59" *) BC_counter[2] : _005_[2];
  assign _013_[3] = active ? (* src = "./src/serieparalelo_syn.v:59" *) BC_counter[3] : _005_[3];
  assign _000_[0] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _014_[0] : 1'h0;
  assign _000_[1] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _014_[1] : 1'h0;
  assign _000_[2] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _014_[2] : 1'h0;
  assign _000_[3] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _014_[3] : 1'h0;
  assign _015_[0] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[0] : out[0];
  assign _015_[1] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[1] : out[1];
  assign _015_[2] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[2] : out[2];
  assign _015_[3] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[3] : out[3];
  assign _015_[4] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[4] : out[4];
  assign _015_[5] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[5] : out[5];
  assign _015_[6] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[6] : out[6];
  assign _015_[7] = _004_ ? (* src = "./src/serieparalelo_syn.v:74" *) register[7] : out[7];
  assign _001_[0] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[0] : 1'h0;
  assign _001_[1] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[1] : 1'h0;
  assign _001_[2] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[2] : 1'h0;
  assign _001_[3] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[3] : 1'h0;
  assign _001_[4] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[4] : 1'h0;
  assign _001_[5] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[5] : 1'h0;
  assign _001_[6] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[6] : 1'h0;
  assign _001_[7] = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _015_[7] : 1'h0;
  assign _003_ = reset ? (* src = "./src/serieparalelo_syn.v:51" *) _004_ : valid;
  assign _002_[0] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) in : 1'h0;
  assign _002_[1] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) register[0] : 1'h0;
  assign _002_[2] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) register[1] : 1'h0;
  assign _002_[3] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) register[2] : 1'h0;
  assign _002_[4] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) register[3] : 1'h0;
  assign _002_[5] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) register[4] : 1'h0;
  assign _002_[6] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) register[5] : 1'h0;
  assign _002_[7] = reset ? (* src = "./src/serieparalelo_syn.v:40" *) register[6] : 1'h0;
  assign _020_ = ~(* src = "./src/serieparalelo_syn.v:86" *) _021_;
  assign _019_ = ~(* src = "./src/serieparalelo_syn.v:86" *) _017_[31];
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _075_ (
    .C(clk4f),
    .D(_003_),
    .Q(valid)
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _076_ (
    .C(clk4f),
    .D(_001_[0]),
    .Q(out[0])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _077_ (
    .C(clk4f),
    .D(_001_[1]),
    .Q(out[1])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _078_ (
    .C(clk4f),
    .D(_001_[2]),
    .Q(out[2])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _079_ (
    .C(clk4f),
    .D(_001_[3]),
    .Q(out[3])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _080_ (
    .C(clk4f),
    .D(_001_[4]),
    .Q(out[4])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _081_ (
    .C(clk4f),
    .D(_001_[5]),
    .Q(out[5])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _082_ (
    .C(clk4f),
    .D(_001_[6]),
    .Q(out[6])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _083_ (
    .C(clk4f),
    .D(_001_[7]),
    .Q(out[7])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _084_ (
    .C(clk4f),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _085_ (
    .C(clk4f),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _086_ (
    .C(clk4f),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  (* src = "./src/serieparalelo_syn.v:50" *)
  DFF _087_ (
    .C(clk4f),
    .D(_000_[3]),
    .Q(BC_counter[3])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _088_ (
    .C(clk32f),
    .D(_002_[0]),
    .Q(register[0])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _089_ (
    .C(clk32f),
    .D(_002_[1]),
    .Q(register[1])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _090_ (
    .C(clk32f),
    .D(_002_[2]),
    .Q(register[2])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _091_ (
    .C(clk32f),
    .D(_002_[3]),
    .Q(register[3])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _092_ (
    .C(clk32f),
    .D(_002_[4]),
    .Q(register[4])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _093_ (
    .C(clk32f),
    .D(_002_[5]),
    .Q(register[5])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _094_ (
    .C(clk32f),
    .D(_002_[6]),
    .Q(register[6])
  );
  (* src = "./src/serieparalelo_syn.v:39" *)
  DFF _095_ (
    .C(clk32f),
    .D(_002_[7]),
    .Q(register[7])
  );
  assign _005_[0] = BC_counter[0] ^(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:262" *)  1'h1;
  assign _018_[1] = BC_counter[1] ^(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:262" *)  1'h1;
  assign _018_[3] = BC_counter[3] ^(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:262" *)  1'h1;
  assign _016_[1] = BC_counter[1] &(* src = "./src/serieparalelo_syn.v:60|<techmap.v>:260|<techmap.v>:221" *)  BC_counter[0];
  assign _016_[2] = BC_counter[2] &(* src = "./src/serieparalelo_syn.v:60|<techmap.v>:260|<techmap.v>:229" *)  _016_[1];
  assign _022_ = _018_[1] &(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:221" *)  _017_[0];
  assign _023_ = _008_[1] &(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:221" *)  _017_[1];
  assign _008_[1] = _018_[3] &(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:222" *)  BC_counter[2];
  assign _017_[0] = BC_counter[0] |(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:212" *)  _005_[0];
  assign _017_[1] = BC_counter[1] |(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:221" *)  _022_;
  assign _017_[31] = BC_counter[3] |(* src = "./src/serieparalelo_syn.v:86|<techmap.v>:260|<techmap.v>:221" *)  _023_;
  assign _010_[2] = register[2] ^(* src = "./src/serieparalelo_syn.v:67" *)  1'h1;
  assign _010_[3] = register[3] ^(* src = "./src/serieparalelo_syn.v:67" *)  1'h1;
  assign _010_[4] = register[4] ^(* src = "./src/serieparalelo_syn.v:67" *)  1'h1;
  assign _010_[5] = register[5] ^(* src = "./src/serieparalelo_syn.v:67" *)  1'h1;
  assign _010_[7] = register[7] ^(* src = "./src/serieparalelo_syn.v:67" *)  1'h1;
  assign _021_ = _019_ | _009_[0];
  assign _005_[1] = BC_counter[1] ^(* src = "./src/serieparalelo_syn.v:60|<techmap.v>:263" *)  BC_counter[0];
  assign _005_[2] = BC_counter[2] ^(* src = "./src/serieparalelo_syn.v:60|<techmap.v>:263" *)  _016_[1];
  assign _005_[3] = BC_counter[3] ^(* src = "./src/serieparalelo_syn.v:60|<techmap.v>:263" *)  _016_[2];
  assign _005_[31:5] = 27'h0000000;
  assign _008_[15:2] = 14'h3fff;
  assign _009_[7:1] = 7'h7f;
  assign { _010_[6], _010_[1:0] } = { register[6], register[1:0] };
  assign { _016_[31:3], _016_[0] } = { 28'h0000000, _005_[4], BC_counter[0] };
  assign _017_[30:3] = { _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31] };
  assign { _018_[31:4], _018_[2], _018_[0] } = { 28'hfffffff, BC_counter[2], _005_[0] };
endmodule
