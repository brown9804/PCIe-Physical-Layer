/* Generated by Yosys 0.9 (git sha1 UNKNOWN, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os) */

(* src = "./src/demux1x2_behav_syn.v:23" *)
module demux1x2_behav_syn(in, clk, reset, valid, out0, out1, validout);
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  wire [7:0] _00_;
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  wire [7:0] _01_;
  (* src = "./src/demux1x2_behav_syn.v:42" *)
  wire _02_;
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  wire [1:0] _03_;
  (* src = "./src/demux1x2_behav_syn.v:46" *)
  wire _04_;
  wire _05_;
  wire _06_;
  wire [7:0] _07_;
  wire [7:0] _08_;
  wire [7:0] _09_;
  wire [7:0] _10_;
  (* src = "./src/demux1x2_behav_syn.v:26" *)
  input clk;
  (* src = "./src/demux1x2_behav_syn.v:25" *)
  input [7:0] in;
  (* src = "./src/demux1x2_behav_syn.v:38" *)
  wire [7:0] node0;
  (* src = "./src/demux1x2_behav_syn.v:39" *)
  wire [7:0] node1;
  (* src = "./src/demux1x2_behav_syn.v:31" *)
  output [7:0] out0;
  (* src = "./src/demux1x2_behav_syn.v:32" *)
  output [7:0] out1;
  (* src = "./src/demux1x2_behav_syn.v:27" *)
  input reset;
  (* src = "./src/demux1x2_behav_syn.v:37" *)
  wire selector;
  (* src = "./src/demux1x2_behav_syn.v:28" *)
  input valid;
  (* src = "./src/demux1x2_behav_syn.v:33" *)
  output [1:0] validout;
  assign _05_ = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) validout[1] : valid;
  assign _03_[1] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _05_ : validout[1];
  assign _07_[0] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[0] : node0[0];
  assign _07_[1] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[1] : node0[1];
  assign _07_[2] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[2] : node0[2];
  assign _07_[3] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[3] : node0[3];
  assign _07_[4] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[4] : node0[4];
  assign _07_[5] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[5] : node0[5];
  assign _07_[6] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[6] : node0[6];
  assign _07_[7] = valid ? (* src = "./src/demux1x2_behav_syn.v:56" *) in[7] : node0[7];
  assign _06_ = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) valid : validout[0];
  assign _03_[0] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _06_ : validout[0];
  assign _08_[0] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[0] : node0[0];
  assign _08_[1] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[1] : node0[1];
  assign _08_[2] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[2] : node0[2];
  assign _08_[3] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[3] : node0[3];
  assign _08_[4] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[4] : node0[4];
  assign _08_[5] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[5] : node0[5];
  assign _08_[6] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[6] : node0[6];
  assign _08_[7] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) _07_[7] : node0[7];
  assign _00_[0] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _08_[7] : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/demux1x2_behav_syn.v:51" *) _10_[7] : 1'h0;
  assign _09_[0] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[0] : node1[0];
  assign _09_[1] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[1] : node1[1];
  assign _09_[2] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[2] : node1[2];
  assign _09_[3] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[3] : node1[3];
  assign _09_[4] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[4] : node1[4];
  assign _09_[5] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[5] : node1[5];
  assign _09_[6] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[6] : node1[6];
  assign _09_[7] = valid ? (* src = "./src/demux1x2_behav_syn.v:64" *) in[7] : node1[7];
  assign _10_[0] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[0] : _09_[0];
  assign _10_[1] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[1] : _09_[1];
  assign _10_[2] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[2] : _09_[2];
  assign _10_[3] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[3] : _09_[3];
  assign _10_[4] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[4] : _09_[4];
  assign _10_[5] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[5] : _09_[5];
  assign _10_[6] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[6] : _09_[6];
  assign _10_[7] = selector ? (* src = "./src/demux1x2_behav_syn.v:55" *) node1[7] : _09_[7];
  assign _02_ = reset ? (* src = "./src/demux1x2_behav_syn.v:43" *) _04_ : 1'h0;
  assign _04_ = ~(* src = "./src/demux1x2_behav_syn.v:46" *) selector;
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _65_ (
    .C(clk),
    .D(node0[0]),
    .Q(out0[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _66_ (
    .C(clk),
    .D(node0[1]),
    .Q(out0[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _67_ (
    .C(clk),
    .D(node0[2]),
    .Q(out0[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _68_ (
    .C(clk),
    .D(node0[3]),
    .Q(out0[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _69_ (
    .C(clk),
    .D(node0[4]),
    .Q(out0[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _70_ (
    .C(clk),
    .D(node0[5]),
    .Q(out0[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _71_ (
    .C(clk),
    .D(node0[6]),
    .Q(out0[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _72_ (
    .C(clk),
    .D(node0[7]),
    .Q(out0[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _73_ (
    .C(clk),
    .D(node1[0]),
    .Q(out1[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _74_ (
    .C(clk),
    .D(node1[1]),
    .Q(out1[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _75_ (
    .C(clk),
    .D(node1[2]),
    .Q(out1[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _76_ (
    .C(clk),
    .D(node1[3]),
    .Q(out1[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _77_ (
    .C(clk),
    .D(node1[4]),
    .Q(out1[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _78_ (
    .C(clk),
    .D(node1[5]),
    .Q(out1[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _79_ (
    .C(clk),
    .D(node1[6]),
    .Q(out1[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:76" *)
  DFF _80_ (
    .C(clk),
    .D(node1[7]),
    .Q(out1[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _81_ (
    .C(clk),
    .D(_03_[0]),
    .Q(validout[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _82_ (
    .C(clk),
    .D(_03_[1]),
    .Q(validout[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _83_ (
    .C(clk),
    .D(_00_[0]),
    .Q(node0[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _84_ (
    .C(clk),
    .D(_00_[1]),
    .Q(node0[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _85_ (
    .C(clk),
    .D(_00_[2]),
    .Q(node0[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _86_ (
    .C(clk),
    .D(_00_[3]),
    .Q(node0[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _87_ (
    .C(clk),
    .D(_00_[4]),
    .Q(node0[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _88_ (
    .C(clk),
    .D(_00_[5]),
    .Q(node0[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _89_ (
    .C(clk),
    .D(_00_[6]),
    .Q(node0[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _90_ (
    .C(clk),
    .D(_00_[7]),
    .Q(node0[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _91_ (
    .C(clk),
    .D(_01_[0]),
    .Q(node1[0])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _92_ (
    .C(clk),
    .D(_01_[1]),
    .Q(node1[1])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _93_ (
    .C(clk),
    .D(_01_[2]),
    .Q(node1[2])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _94_ (
    .C(clk),
    .D(_01_[3]),
    .Q(node1[3])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _95_ (
    .C(clk),
    .D(_01_[4]),
    .Q(node1[4])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _96_ (
    .C(clk),
    .D(_01_[5]),
    .Q(node1[5])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _97_ (
    .C(clk),
    .D(_01_[6]),
    .Q(node1[6])
  );
  (* src = "./src/demux1x2_behav_syn.v:50" *)
  DFF _98_ (
    .C(clk),
    .D(_01_[7]),
    .Q(node1[7])
  );
  (* src = "./src/demux1x2_behav_syn.v:42" *)
  DFF _99_ (
    .C(clk),
    .D(_02_),
    .Q(selector)
  );
endmodule

(* src = "./src/demux1x4_behav_syn.v:25" *)
module demux1x4_behav_syn(clk1f, clk2f, clk4f, reset, in, valid, out0, out1, out2, out3, validout);
  (* src = "./src/demux1x4_behav_syn.v:26" *)
  input clk1f;
  (* src = "./src/demux1x4_behav_syn.v:27" *)
  input clk2f;
  (* src = "./src/demux1x4_behav_syn.v:28" *)
  input clk4f;
  (* src = "./src/demux1x4_behav_syn.v:32" *)
  input [7:0] in;
  (* src = "./src/demux1x4_behav_syn.v:46" *)
  wire [7:0] n0;
  (* src = "./src/demux1x4_behav_syn.v:46" *)
  wire [7:0] n1;
  (* src = "./src/demux1x4_behav_syn.v:48" *)
  wire [7:0] n2;
  (* src = "./src/demux1x4_behav_syn.v:48" *)
  wire [7:0] n3;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] n4;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] n5;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] n6;
  (* src = "./src/demux1x4_behav_syn.v:49" *)
  wire [7:0] n7;
  (* src = "./src/demux1x4_behav_syn.v:36" *)
  output [7:0] out0;
  (* src = "./src/demux1x4_behav_syn.v:37" *)
  output [7:0] out1;
  (* src = "./src/demux1x4_behav_syn.v:38" *)
  output [7:0] out2;
  (* src = "./src/demux1x4_behav_syn.v:39" *)
  output [7:0] out3;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out0;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out1;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out2;
  (* src = "./src/demux1x4_behav_syn.v:51" *)
  wire [7:0] pre_out3;
  (* src = "./src/demux1x4_behav_syn.v:29" *)
  input reset;
  (* src = "./src/demux1x4_behav_syn.v:50" *)
  wire [3:0] v_out;
  (* src = "./src/demux1x4_behav_syn.v:33" *)
  input valid;
  (* src = "./src/demux1x4_behav_syn.v:47" *)
  wire [1:0] valid_12;
  (* src = "./src/demux1x4_behav_syn.v:47" *)
  wire [1:0] valid_24;
  (* src = "./src/demux1x4_behav_syn.v:50" *)
  wire [3:0] valid_out24;
  (* src = "./src/demux1x4_behav_syn.v:40" *)
  output [3:0] validout;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:54" *)
  demux1x2_behav_syn demux12 (
    .clk(clk4f),
    .in(in),
    .out0(n0),
    .out1(n1),
    .reset(reset),
    .valid(valid),
    .validout(valid_12)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:88" *)
  demux1x2_behav_syn demux12A (
    .clk(clk2f),
    .in(n2),
    .out0(n4),
    .out1(n5),
    .reset(reset),
    .valid(valid_24[0]),
    .validout(valid_out24[1:0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:97" *)
  demux1x2_behav_syn demux12B (
    .clk(clk2f),
    .in(n3),
    .out0(n6),
    .out1(n7),
    .reset(reset),
    .valid(valid_24[1]),
    .validout(valid_out24[3:2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:75" *)
  ff4in4o_synvalid ffvalid21 (
    .clk(clk2f),
    .in0(valid_12[0]),
    .in1(valid_12[1]),
    .out0(valid_24[0]),
    .out1(valid_24[1]),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:121" *)
  ff4in4o_syn flops14 (
    .clk(clk1f),
    .in0(n4),
    .in1(n5),
    .in2(n6),
    .in3(n7),
    .out0(pre_out0),
    .out1(pre_out1),
    .out2(pre_out2),
    .out3(pre_out3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:65" *)
  ff2in2o_syn flops1_2 (
    .clk(clk2f),
    .in0(n0),
    .in1(n1),
    .out0(n2),
    .out1(n3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/demux1x4_behav_syn.v:136" *)
  ff4in4o_synvalid flops2_4valid (
    .clk(clk1f),
    .in0(valid_out24[0]),
    .in1(valid_out24[1]),
    .in2(valid_out24[2]),
    .in3(valid_out24[3]),
    .out0(v_out[0]),
    .out1(v_out[1]),
    .out2(v_out[2]),
    .out3(v_out[3]),
    .reset(reset)
  );
  assign out0 = pre_out0;
  assign out1 = pre_out1;
  assign out2 = pre_out2;
  assign out3 = pre_out3;
  assign validout = v_out;
endmodule

(* src = "./src/ff2in2o_syn.v:10" *)
module ff2in2o_syn(clk, reset, in0, in1, out0, out1);
  (* src = "./src/ff2in2o_syn.v:21" *)
  wire [7:0] _00_;
  (* src = "./src/ff2in2o_syn.v:21" *)
  wire [7:0] _01_;
  (* src = "./src/ff2in2o_syn.v:11" *)
  input clk;
  (* src = "./src/ff2in2o_syn.v:14" *)
  input [7:0] in0;
  (* src = "./src/ff2in2o_syn.v:15" *)
  input [7:0] in1;
  (* src = "./src/ff2in2o_syn.v:17" *)
  output [7:0] out0;
  (* src = "./src/ff2in2o_syn.v:18" *)
  output [7:0] out1;
  (* src = "./src/ff2in2o_syn.v:12" *)
  input reset;
  assign _01_[0] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in1[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/ff2in2o_syn.v:25" *) in0[7] : 1'h0;
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _18_ (
    .C(clk),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _19_ (
    .C(clk),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _20_ (
    .C(clk),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _21_ (
    .C(clk),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _22_ (
    .C(clk),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _23_ (
    .C(clk),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _24_ (
    .C(clk),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _25_ (
    .C(clk),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _26_ (
    .C(clk),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _27_ (
    .C(clk),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _28_ (
    .C(clk),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _29_ (
    .C(clk),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _30_ (
    .C(clk),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _31_ (
    .C(clk),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _32_ (
    .C(clk),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "./src/ff2in2o_syn.v:21" *)
  DFF _33_ (
    .C(clk),
    .D(_01_[7]),
    .Q(out1[7])
  );
endmodule

(* src = "./src/ff4in4o_syn.v:10" *)
module ff4in4o_syn(clk, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "./src/ff4in4o_syn.v:25" *)
  wire [7:0] _00_;
  (* src = "./src/ff4in4o_syn.v:25" *)
  wire [7:0] _01_;
  (* src = "./src/ff4in4o_syn.v:25" *)
  wire [7:0] _02_;
  (* src = "./src/ff4in4o_syn.v:25" *)
  wire [7:0] _03_;
  (* src = "./src/ff4in4o_syn.v:11" *)
  input clk;
  (* src = "./src/ff4in4o_syn.v:14" *)
  input [7:0] in0;
  (* src = "./src/ff4in4o_syn.v:15" *)
  input [7:0] in1;
  (* src = "./src/ff4in4o_syn.v:16" *)
  input [7:0] in2;
  (* src = "./src/ff4in4o_syn.v:17" *)
  input [7:0] in3;
  (* src = "./src/ff4in4o_syn.v:19" *)
  output [7:0] out0;
  (* src = "./src/ff4in4o_syn.v:20" *)
  output [7:0] out1;
  (* src = "./src/ff4in4o_syn.v:21" *)
  output [7:0] out2;
  (* src = "./src/ff4in4o_syn.v:22" *)
  output [7:0] out3;
  (* src = "./src/ff4in4o_syn.v:12" *)
  input reset;
  assign _02_[0] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[0] : 1'h0;
  assign _02_[1] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[1] : 1'h0;
  assign _02_[2] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[2] : 1'h0;
  assign _02_[3] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[3] : 1'h0;
  assign _02_[4] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[4] : 1'h0;
  assign _02_[5] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[5] : 1'h0;
  assign _02_[6] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[6] : 1'h0;
  assign _02_[7] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in2[7] : 1'h0;
  assign _03_[0] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[0] : 1'h0;
  assign _03_[1] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[1] : 1'h0;
  assign _03_[2] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[2] : 1'h0;
  assign _03_[3] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[3] : 1'h0;
  assign _03_[4] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[4] : 1'h0;
  assign _03_[5] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[5] : 1'h0;
  assign _03_[6] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[6] : 1'h0;
  assign _03_[7] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in3[7] : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in1[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/ff4in4o_syn.v:29" *) in0[7] : 1'h0;
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _36_ (
    .C(clk),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _37_ (
    .C(clk),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _38_ (
    .C(clk),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _39_ (
    .C(clk),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _40_ (
    .C(clk),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _41_ (
    .C(clk),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _42_ (
    .C(clk),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _43_ (
    .C(clk),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _44_ (
    .C(clk),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _45_ (
    .C(clk),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _46_ (
    .C(clk),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _47_ (
    .C(clk),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _48_ (
    .C(clk),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _49_ (
    .C(clk),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _50_ (
    .C(clk),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _51_ (
    .C(clk),
    .D(_01_[7]),
    .Q(out1[7])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _52_ (
    .C(clk),
    .D(_02_[0]),
    .Q(out2[0])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _53_ (
    .C(clk),
    .D(_02_[1]),
    .Q(out2[1])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _54_ (
    .C(clk),
    .D(_02_[2]),
    .Q(out2[2])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _55_ (
    .C(clk),
    .D(_02_[3]),
    .Q(out2[3])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _56_ (
    .C(clk),
    .D(_02_[4]),
    .Q(out2[4])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _57_ (
    .C(clk),
    .D(_02_[5]),
    .Q(out2[5])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _58_ (
    .C(clk),
    .D(_02_[6]),
    .Q(out2[6])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _59_ (
    .C(clk),
    .D(_02_[7]),
    .Q(out2[7])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _60_ (
    .C(clk),
    .D(_03_[0]),
    .Q(out3[0])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _61_ (
    .C(clk),
    .D(_03_[1]),
    .Q(out3[1])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _62_ (
    .C(clk),
    .D(_03_[2]),
    .Q(out3[2])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _63_ (
    .C(clk),
    .D(_03_[3]),
    .Q(out3[3])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _64_ (
    .C(clk),
    .D(_03_[4]),
    .Q(out3[4])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _65_ (
    .C(clk),
    .D(_03_[5]),
    .Q(out3[5])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _66_ (
    .C(clk),
    .D(_03_[6]),
    .Q(out3[6])
  );
  (* src = "./src/ff4in4o_syn.v:25" *)
  DFF _67_ (
    .C(clk),
    .D(_03_[7]),
    .Q(out3[7])
  );
endmodule

(* src = "./src/ff4in4o_synvalid.v:8" *)
module ff4in4o_synvalid(clk, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  wire _00_;
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  wire _01_;
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  wire _02_;
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  wire _03_;
  (* src = "./src/ff4in4o_synvalid.v:9" *)
  input clk;
  (* src = "./src/ff4in4o_synvalid.v:12" *)
  input in0;
  (* src = "./src/ff4in4o_synvalid.v:13" *)
  input in1;
  (* src = "./src/ff4in4o_synvalid.v:14" *)
  input in2;
  (* src = "./src/ff4in4o_synvalid.v:15" *)
  input in3;
  (* src = "./src/ff4in4o_synvalid.v:17" *)
  output out0;
  (* src = "./src/ff4in4o_synvalid.v:18" *)
  output out1;
  (* src = "./src/ff4in4o_synvalid.v:19" *)
  output out2;
  (* src = "./src/ff4in4o_synvalid.v:20" *)
  output out3;
  (* src = "./src/ff4in4o_synvalid.v:10" *)
  input reset;
  assign _01_ = reset ? (* src = "./src/ff4in4o_synvalid.v:27" *) in1 : 1'h0;
  assign _03_ = reset ? (* src = "./src/ff4in4o_synvalid.v:27" *) in3 : 1'h0;
  assign _02_ = reset ? (* src = "./src/ff4in4o_synvalid.v:27" *) in2 : 1'h0;
  assign _00_ = reset ? (* src = "./src/ff4in4o_synvalid.v:27" *) in0 : 1'h0;
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  DFF _08_ (
    .C(clk),
    .D(_00_),
    .Q(out0)
  );
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  DFF _09_ (
    .C(clk),
    .D(_01_),
    .Q(out1)
  );
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  DFF _10_ (
    .C(clk),
    .D(_02_),
    .Q(out2)
  );
  (* src = "./src/ff4in4o_synvalid.v:23" *)
  DFF _11_ (
    .C(clk),
    .D(_03_),
    .Q(out3)
  );
endmodule

(* src = "./src/mux2x1_behav_syn.v:21" *)
module mux2x1_behav_syn(clk, in0, in1, valid, reset, out, validout);
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire [7:0] _00_;
  (* src = "./src/mux2x1_behav_syn.v:36" *)
  wire _01_;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  wire _02_;
  (* src = "./src/mux2x1_behav_syn.v:40" *)
  wire _03_;
  wire [7:0] _04_;
  wire [7:0] _05_;
  wire [7:0] _06_;
  wire _07_;
  (* src = "./src/mux2x1_behav_syn.v:24" *)
  input clk;
  (* src = "./src/mux2x1_behav_syn.v:25" *)
  input [7:0] in0;
  (* src = "./src/mux2x1_behav_syn.v:26" *)
  input [7:0] in1;
  (* src = "./src/mux2x1_behav_syn.v:31" *)
  output [7:0] out;
  (* src = "./src/mux2x1_behav_syn.v:28" *)
  input reset;
  (* src = "./src/mux2x1_behav_syn.v:34" *)
  wire selector;
  (* src = "./src/mux2x1_behav_syn.v:27" *)
  input [1:0] valid;
  (* src = "./src/mux2x1_behav_syn.v:32" *)
  output validout;
  assign _05_[0] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[0] : out[0];
  assign _05_[1] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[1] : out[1];
  assign _05_[2] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[2] : out[2];
  assign _05_[3] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[3] : out[3];
  assign _05_[4] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[4] : out[4];
  assign _05_[5] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[5] : out[5];
  assign _05_[6] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[6] : out[6];
  assign _05_[7] = valid[1] ? (* src = "./src/mux2x1_behav_syn.v:53" *) in1[7] : out[7];
  assign _04_[0] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[0] : out[0];
  assign _04_[1] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[1] : out[1];
  assign _04_[2] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[2] : out[2];
  assign _04_[3] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[3] : out[3];
  assign _04_[4] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[4] : out[4];
  assign _04_[5] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[5] : out[5];
  assign _04_[6] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[6] : out[6];
  assign _04_[7] = valid[0] ? (* src = "./src/mux2x1_behav_syn.v:60" *) in0[7] : out[7];
  assign _06_[0] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[0] : _04_[0];
  assign _06_[1] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[1] : _04_[1];
  assign _06_[2] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[2] : _04_[2];
  assign _06_[3] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[3] : _04_[3];
  assign _06_[4] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[4] : _04_[4];
  assign _06_[5] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[5] : _04_[5];
  assign _06_[6] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[6] : _04_[6];
  assign _06_[7] = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) _05_[7] : _04_[7];
  assign _00_[0] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _06_[7] : 1'h0;
  assign _01_ = reset ? (* src = "./src/mux2x1_behav_syn.v:37" *) _03_ : 1'h0;
  assign _07_ = selector ? (* src = "./src/mux2x1_behav_syn.v:51" *) valid[1] : valid[0];
  assign _02_ = reset ? (* src = "./src/mux2x1_behav_syn.v:47" *) _07_ : 1'h0;
  assign _03_ = ~(* src = "./src/mux2x1_behav_syn.v:40" *) selector;
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _44_ (
    .C(clk),
    .D(_02_),
    .Q(validout)
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _45_ (
    .C(clk),
    .D(_00_[0]),
    .Q(out[0])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _46_ (
    .C(clk),
    .D(_00_[1]),
    .Q(out[1])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _47_ (
    .C(clk),
    .D(_00_[2]),
    .Q(out[2])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _48_ (
    .C(clk),
    .D(_00_[3]),
    .Q(out[3])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _49_ (
    .C(clk),
    .D(_00_[4]),
    .Q(out[4])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _50_ (
    .C(clk),
    .D(_00_[5]),
    .Q(out[5])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _51_ (
    .C(clk),
    .D(_00_[6]),
    .Q(out[6])
  );
  (* src = "./src/mux2x1_behav_syn.v:46" *)
  DFF _52_ (
    .C(clk),
    .D(_00_[7]),
    .Q(out[7])
  );
  (* src = "./src/mux2x1_behav_syn.v:36" *)
  DFF _53_ (
    .C(clk),
    .D(_01_),
    .Q(selector)
  );
endmodule

(* src = "./src/mux4x1_behav_syn.v:27" *)
module mux4x1_behav_syn(clk1f, clk2f, clk4f, reset, in0, in1, in2, in3, valid, out, validout);
  (* src = "./src/mux4x1_behav_syn.v:30" *)
  input clk1f;
  (* src = "./src/mux4x1_behav_syn.v:31" *)
  input clk2f;
  (* src = "./src/mux4x1_behav_syn.v:32" *)
  input clk4f;
  (* src = "./src/mux4x1_behav_syn.v:34" *)
  input [7:0] in0;
  (* src = "./src/mux4x1_behav_syn.v:35" *)
  input [7:0] in1;
  (* src = "./src/mux4x1_behav_syn.v:36" *)
  input [7:0] in2;
  (* src = "./src/mux4x1_behav_syn.v:37" *)
  input [7:0] in3;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n0;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n1;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n2;
  (* src = "./src/mux4x1_behav_syn.v:46" *)
  wire [7:0] n3;
  (* src = "./src/mux4x1_behav_syn.v:47" *)
  wire [7:0] n4;
  (* src = "./src/mux4x1_behav_syn.v:47" *)
  wire [7:0] n5;
  (* src = "./src/mux4x1_behav_syn.v:47" *)
  wire [7:0] n6;
  (* src = "./src/mux4x1_behav_syn.v:47" *)
  wire [7:0] n7;
  (* src = "./src/mux4x1_behav_syn.v:41" *)
  output [7:0] out;
  (* src = "./src/mux4x1_behav_syn.v:33" *)
  input reset;
  (* src = "./src/mux4x1_behav_syn.v:54" *)
  wire v_out;
  (* src = "./src/mux4x1_behav_syn.v:38" *)
  input [3:0] valid;
  (* src = "./src/mux4x1_behav_syn.v:52" *)
  wire [1:0] valid_21;
  (* src = "./src/mux4x1_behav_syn.v:51" *)
  wire [3:0] valid_n;
  (* src = "./src/mux4x1_behav_syn.v:53" *)
  wire [1:0] valid_out;
  (* src = "./src/mux4x1_behav_syn.v:42" *)
  output validout;
  (* src = "./src/mux4x1_behav_syn.v:50" *)
  wire [7:0] w;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:57" *)
  ff4in4o_syn ff4 (
    .clk(clk1f),
    .in0(in0),
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .out0(n0),
    .out1(n1),
    .out2(n2),
    .out3(n3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:105" *)
  ff2in2o_syn ff42 (
    .clk(clk2f),
    .in0(n4),
    .in1(n5),
    .out0(n6),
    .out1(n7),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:114" *)
  ff4in4o_synvalid ffvalid21 (
    .clk(clk2f),
    .in0(valid_out[0]),
    .in1(valid_out[1]),
    .out0(valid_21[0]),
    .out1(valid_21[1]),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:70" *)
  ff4in4o_synvalid ffvalid42 (
    .clk(clk1f),
    .in0(valid[0]),
    .in1(valid[1]),
    .in2(valid[2]),
    .in3(valid[3]),
    .out0(valid_n[0]),
    .out1(valid_n[1]),
    .out2(valid_n[2]),
    .out3(valid_n[3]),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:91" *)
  mux4x2_behav_syn mux_A (
    .clk(clk2f),
    .in0(n0),
    .in1(n1),
    .in2(n2),
    .in3(n3),
    .out0(n4),
    .out1(n5),
    .reset(reset),
    .valid(valid_n),
    .validout(valid_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x1_behav_syn.v:127" *)
  mux2x1_behav_syn mux_B (
    .clk(clk4f),
    .in0(n6),
    .in1(n7),
    .out(w),
    .reset(reset),
    .valid(valid_21),
    .validout(v_out)
  );
  assign out = w;
  assign validout = v_out;
endmodule

(* src = "./src/mux4x2_behav_syn.v:23" *)
module mux4x2_behav_syn(clk, in0, in1, in2, in3, valid, reset, out0, out1, validout);
  (* src = "./src/mux4x2_behav_syn.v:26" *)
  input clk;
  (* src = "./src/mux4x2_behav_syn.v:27" *)
  input [7:0] in0;
  (* src = "./src/mux4x2_behav_syn.v:28" *)
  input [7:0] in1;
  (* src = "./src/mux4x2_behav_syn.v:29" *)
  input [7:0] in2;
  (* src = "./src/mux4x2_behav_syn.v:30" *)
  input [7:0] in3;
  (* src = "./src/mux4x2_behav_syn.v:35" *)
  output [7:0] out0;
  (* src = "./src/mux4x2_behav_syn.v:36" *)
  output [7:0] out1;
  (* src = "./src/mux4x2_behav_syn.v:32" *)
  input reset;
  (* src = "./src/mux4x2_behav_syn.v:31" *)
  input [3:0] valid;
  (* src = "./src/mux4x2_behav_syn.v:37" *)
  output [1:0] validout;
  (* src = "./src/mux4x2_behav_syn.v:43" *)
  wire validoutA;
  (* src = "./src/mux4x2_behav_syn.v:43" *)
  wire validoutB;
  (* src = "./src/mux4x2_behav_syn.v:41" *)
  wire [7:0] wout0;
  (* src = "./src/mux4x2_behav_syn.v:42" *)
  wire [7:0] wout1;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x2_behav_syn.v:47" *)
  mux2x1_behav_syn mux_A (
    .clk(clk),
    .in0(in0),
    .in1(in1),
    .out(wout0),
    .reset(reset),
    .valid(valid[1:0]),
    .validout(validoutA)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/mux4x2_behav_syn.v:56" *)
  mux2x1_behav_syn mux_B (
    .clk(clk),
    .in0(in2),
    .in1(in3),
    .out(wout1),
    .reset(reset),
    .valid(valid[3:2]),
    .validout(validoutB)
  );
  assign out0 = wout0;
  assign out1 = wout1;
  assign validout = { validoutB, validoutA };
endmodule

(* src = "./src/paralelltoserial.v:4" *)
module paralelo_a_serial_syn(in, in_valid, reset, clk32f, out);
  (* src = "./src/paralelltoserial.v:24" *)
  wire _00_;
  (* src = "./src/paralelltoserial.v:24" *)
  wire [2:0] _01_;
  (* src = "./src/paralelltoserial.v:34" *)
  (* unused_bits = "3" *)
  wire [31:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [2:0] _07_;
  wire [1:0] _08_;
  wire [2:0] _09_;
  wire [1:0] _10_;
  wire _11_;
  wire [2:0] _12_;
  wire [2:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  (* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:432" *)
  wire [6:0] _20_;
  (* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:428" *)
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  (* src = "./src/paralelltoserial.v:34|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _30_;
  (* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *)
  wire _31_;
  (* src = "./src/paralelltoserial.v:9" *)
  input clk32f;
  (* src = "./src/paralelltoserial.v:6" *)
  input [7:0] in;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in0;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in1;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in2;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in3;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in4;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in5;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in6;
  (* src = "./src/paralelltoserial.v:13" *)
  wire in7;
  (* src = "./src/paralelltoserial.v:7" *)
  input in_valid;
  (* src = "./src/paralelltoserial.v:10" *)
  output out;
  (* src = "./src/paralelltoserial.v:8" *)
  input reset;
  (* src = "./src/paralelltoserial.v:14" *)
  wire [2:0] selector;
  assign _14_ = _03_ |(* src = "./src/paralelltoserial.v:41|./src/paralelltoserial.v:35" *)  _12_[2];
  assign _15_ = _04_ |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35" *)  _12_[2];
  assign _16_ = _05_ |(* src = "./src/paralelltoserial.v:40|./src/paralelltoserial.v:35" *)  _12_[2];
  assign _06_ = _02_[0] |(* src = "./src/paralelltoserial.v:39|./src/paralelltoserial.v:35" *)  _13_[1];
  assign _17_ = _06_ |(* src = "./src/paralelltoserial.v:39|./src/paralelltoserial.v:35" *)  selector[2];
  assign _04_ = selector[0] |(* src = "./src/paralelltoserial.v:38|./src/paralelltoserial.v:35" *)  _13_[1];
  assign _18_ = _04_ |(* src = "./src/paralelltoserial.v:38|./src/paralelltoserial.v:35" *)  selector[2];
  assign _03_ = _02_[0] |(* src = "./src/paralelltoserial.v:37|./src/paralelltoserial.v:35" *)  selector[1];
  assign _19_ = _03_ |(* src = "./src/paralelltoserial.v:37|./src/paralelltoserial.v:35" *)  selector[2];
  assign _07_[0] = _20_[0] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:441" *)  _20_[1];
  assign _07_[1] = _20_[2] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:441" *)  _20_[3];
  assign _07_[2] = _20_[4] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:441" *)  _20_[5];
  assign _08_[0] = _07_[0] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:441" *)  _07_[1];
  assign _08_[1] = _07_[2] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:441" *)  _20_[6];
  assign _21_ = _08_[0] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:441" *)  _08_[1];
  assign _09_[0] = _23_ |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *)  _24_;
  assign _09_[1] = _25_ |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *)  _26_;
  assign _09_[2] = _27_ |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *)  _28_;
  assign _10_[0] = _09_[0] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *)  _09_[1];
  assign _10_[1] = _09_[2] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *)  _29_;
  assign _31_ = _10_[0] |(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *)  _10_[1];
  assign _05_ = selector[0] |(* src = "./src/paralelltoserial.v:36|./src/paralelltoserial.v:35" *)  selector[1];
  assign _11_ = _05_ |(* src = "./src/paralelltoserial.v:36|./src/paralelltoserial.v:35" *)  selector[2];
  assign _24_ = ~(* src = "./src/paralelltoserial.v:41|./src/paralelltoserial.v:35" *) _14_;
  assign _23_ = ~(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35" *) _15_;
  assign _25_ = ~(* src = "./src/paralelltoserial.v:40|./src/paralelltoserial.v:35" *) _16_;
  assign _26_ = ~(* src = "./src/paralelltoserial.v:39|./src/paralelltoserial.v:35" *) _17_;
  assign _27_ = ~(* src = "./src/paralelltoserial.v:38|./src/paralelltoserial.v:35" *) _18_;
  assign _28_ = ~(* src = "./src/paralelltoserial.v:37|./src/paralelltoserial.v:35" *) _19_;
  assign _29_ = ~(* src = "./src/paralelltoserial.v:36|./src/paralelltoserial.v:35" *) _11_;
  assign _00_ = reset ? (* src = "./src/paralelltoserial.v:25" *) _22_ : 1'h0;
  assign in6 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[1] : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/paralelltoserial.v:25" *) _02_[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/paralelltoserial.v:25" *) _02_[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/paralelltoserial.v:25" *) _02_[2] : 1'h0;
  assign in0 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[7] : 1'h1;
  assign in5 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[2] : 1'h1;
  assign in7 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[0] : 1'h0;
  assign in1 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[6] : 1'h0;
  assign in2 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[5] : 1'h1;
  assign in4 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[3] : 1'h1;
  assign in3 = in_valid ? (* src = "./src/paralelltoserial.v:18" *) in[4] : 1'h1;
  assign _22_ = _31_ ? (* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:445" *) _21_ : in7;
  (* src = "./src/paralelltoserial.v:24" *)
  DFF _75_ (
    .C(clk32f),
    .D(_01_[0]),
    .Q(selector[0])
  );
  (* src = "./src/paralelltoserial.v:24" *)
  DFF _76_ (
    .C(clk32f),
    .D(_01_[1]),
    .Q(selector[1])
  );
  (* src = "./src/paralelltoserial.v:24" *)
  DFF _77_ (
    .C(clk32f),
    .D(_01_[2]),
    .Q(selector[2])
  );
  (* src = "./src/paralelltoserial.v:24" *)
  DFF _78_ (
    .C(clk32f),
    .D(_00_),
    .Q(out)
  );
  assign _30_[1] = selector[1] &(* src = "./src/paralelltoserial.v:34|<techmap.v>:260|<techmap.v>:221" *)  selector[0];
  assign _12_[2] = selector[2] ^(* src = "./src/paralelltoserial.v:40|./src/paralelltoserial.v:35" *)  1'h1;
  assign _13_[1] = selector[1] ^(* src = "./src/paralelltoserial.v:38|./src/paralelltoserial.v:35" *)  1'h1;
  assign _02_[0] = selector[0] ^(* src = "./src/paralelltoserial.v:37|./src/paralelltoserial.v:35" *)  1'h1;
  assign _20_[3] = in3 &(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:434" *)  _26_;
  assign _20_[6] = in0 &(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:434" *)  _29_;
  assign _20_[5] = in1 &(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:434" *)  _28_;
  assign _20_[4] = in2 &(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:434" *)  _27_;
  assign _20_[2] = in4 &(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:434" *)  _25_;
  assign _20_[1] = in5 &(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:434" *)  _24_;
  assign _20_[0] = in6 &(* src = "./src/paralelltoserial.v:42|./src/paralelltoserial.v:35|<techmap.v>:434" *)  _23_;
  assign _02_[1] = selector[1] ^(* src = "./src/paralelltoserial.v:34|<techmap.v>:263" *)  selector[0];
  assign _02_[2] = selector[2] ^(* src = "./src/paralelltoserial.v:34|<techmap.v>:263" *)  _30_[1];
  assign _02_[31:4] = 28'h0000000;
  assign _12_[1:0] = { selector[1], _02_[0] };
  assign { _13_[2], _13_[0] } = { _12_[2], selector[0] };
  assign { _30_[31:2], _30_[0] } = { 29'h00000000, _02_[3], selector[0] };
endmodule

(* src = "./src/paralelltoserial_IDLE.v:7" *)
module paralelo_a_serial_syn_IDLE(active, reset, clk32f, out);
  (* src = "./src/paralelltoserial_IDLE.v:28" *)
  wire _00_;
  (* src = "./src/paralelltoserial_IDLE.v:28" *)
  wire [2:0] _01_;
  (* src = "./src/paralelltoserial_IDLE.v:36" *)
  (* unused_bits = "3" *)
  wire [31:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [2:0] _07_;
  wire [1:0] _08_;
  wire [2:0] _09_;
  wire [1:0] _10_;
  wire _11_;
  wire [2:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  (* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:432" *)
  wire [6:0] _19_;
  (* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:428" *)
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  (* src = "./src/paralelltoserial_IDLE.v:36|./src/paralelltoserial.v:34|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _25_;
  (* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:445" *)
  wire _26_;
  (* src = "./src/paralelltoserial_IDLE.v:9" *)
  input active;
  (* src = "./src/paralelltoserial_IDLE.v:11" *)
  input clk32f;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle0;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle1;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle2;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle3;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle4;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle5;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle6;
  (* src = "./src/paralelltoserial_IDLE.v:17" *)
  wire idle7;
  (* src = "./src/paralelltoserial_IDLE.v:12" *)
  output out;
  (* src = "./src/paralelltoserial_IDLE.v:10" *)
  input reset;
  (* src = "./src/paralelltoserial_IDLE.v:18" *)
  wire [2:0] selector;
  assign _13_ = _03_ |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37" *)  _12_[2];
  assign _04_ = _02_[0] |(* src = "./src/paralelltoserial_IDLE.v:43|./src/paralelltoserial_IDLE.v:37" *)  selector[1];
  assign _14_ = _04_ |(* src = "./src/paralelltoserial_IDLE.v:43|./src/paralelltoserial_IDLE.v:37" *)  _12_[2];
  assign _15_ = _05_ |(* src = "./src/paralelltoserial_IDLE.v:42|./src/paralelltoserial_IDLE.v:37" *)  _12_[2];
  assign _06_ = _02_[0] |(* src = "./src/paralelltoserial_IDLE.v:41|./src/paralelltoserial_IDLE.v:37" *)  _12_[1];
  assign _16_ = _06_ |(* src = "./src/paralelltoserial_IDLE.v:41|./src/paralelltoserial_IDLE.v:37" *)  selector[2];
  assign _03_ = selector[0] |(* src = "./src/paralelltoserial_IDLE.v:40|./src/paralelltoserial_IDLE.v:37" *)  _12_[1];
  assign _17_ = _03_ |(* src = "./src/paralelltoserial_IDLE.v:40|./src/paralelltoserial_IDLE.v:37" *)  selector[2];
  assign _18_ = _04_ |(* src = "./src/paralelltoserial_IDLE.v:39|./src/paralelltoserial_IDLE.v:37" *)  selector[2];
  assign _07_[1] = _19_[2] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:441" *)  _19_[3];
  assign _07_[2] = _19_[4] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:441" *)  _19_[5];
  assign _08_[0] = _07_[0] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:441" *)  _07_[1];
  assign _08_[1] = _07_[2] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:441" *)  _19_[6];
  assign _20_ = _08_[0] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:441" *)  _08_[1];
  assign _09_[0] = _22_ |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:445" *)  _07_[0];
  assign _09_[2] = _19_[4] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:445" *)  _23_;
  assign _10_[0] = _09_[0] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:445" *)  _07_[1];
  assign _10_[1] = _09_[2] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:445" *)  _24_;
  assign _26_ = _10_[0] |(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:445" *)  _10_[1];
  assign _05_ = selector[0] |(* src = "./src/paralelltoserial_IDLE.v:38|./src/paralelltoserial_IDLE.v:37" *)  selector[1];
  assign _11_ = _05_ |(* src = "./src/paralelltoserial_IDLE.v:38|./src/paralelltoserial_IDLE.v:37" *)  selector[2];
  assign _22_ = ~(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37" *) _13_;
  assign _07_[0] = ~(* src = "./src/paralelltoserial_IDLE.v:43|./src/paralelltoserial_IDLE.v:37" *) _14_;
  assign _19_[2] = ~(* src = "./src/paralelltoserial_IDLE.v:42|./src/paralelltoserial_IDLE.v:37" *) _15_;
  assign _19_[3] = ~(* src = "./src/paralelltoserial_IDLE.v:41|./src/paralelltoserial_IDLE.v:37" *) _16_;
  assign _19_[4] = ~(* src = "./src/paralelltoserial_IDLE.v:40|./src/paralelltoserial_IDLE.v:37" *) _17_;
  assign _23_ = ~(* src = "./src/paralelltoserial_IDLE.v:39|./src/paralelltoserial_IDLE.v:37" *) _18_;
  assign _24_ = ~(* src = "./src/paralelltoserial_IDLE.v:38|./src/paralelltoserial_IDLE.v:37" *) _11_;
  assign _00_ = reset ? (* src = "./src/paralelltoserial_IDLE.v:29" *) _21_ : 1'h0;
  assign _01_[0] = reset ? (* src = "./src/paralelltoserial_IDLE.v:29" *) _02_[0] : 1'h1;
  assign _01_[1] = reset ? (* src = "./src/paralelltoserial_IDLE.v:29" *) _02_[1] : 1'h1;
  assign _01_[2] = reset ? (* src = "./src/paralelltoserial_IDLE.v:29" *) _02_[2] : 1'h1;
  assign idle0 = ~(* src = "./src/paralelltoserial_IDLE.v:22" *) active;
  assign _21_ = _26_ ? (* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:445" *) _20_ : 1'h0;
  (* src = "./src/paralelltoserial_IDLE.v:28" *)
  DFF _61_ (
    .C(clk32f),
    .D(_01_[0]),
    .Q(selector[0])
  );
  (* src = "./src/paralelltoserial_IDLE.v:28" *)
  DFF _62_ (
    .C(clk32f),
    .D(_01_[1]),
    .Q(selector[1])
  );
  (* src = "./src/paralelltoserial_IDLE.v:28" *)
  DFF _63_ (
    .C(clk32f),
    .D(_01_[2]),
    .Q(selector[2])
  );
  (* src = "./src/paralelltoserial_IDLE.v:28" *)
  DFF _64_ (
    .C(clk32f),
    .D(_00_),
    .Q(out)
  );
  assign _12_[2] = selector[2] ^(* src = "./src/paralelltoserial_IDLE.v:42|./src/paralelltoserial_IDLE.v:37" *)  1'h1;
  assign _12_[1] = selector[1] ^(* src = "./src/paralelltoserial_IDLE.v:40|./src/paralelltoserial_IDLE.v:37" *)  1'h1;
  assign _02_[0] = selector[0] ^(* src = "./src/paralelltoserial_IDLE.v:39|./src/paralelltoserial_IDLE.v:37" *)  1'h1;
  assign _19_[5] = active &(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:434" *)  _23_;
  assign _19_[6] = idle0 &(* src = "./src/paralelltoserial_IDLE.v:44|./src/paralelltoserial_IDLE.v:37|<techmap.v>:434" *)  _24_;
  assign _02_[1] = selector[1] ^(* src = "./src/paralelltoserial_IDLE.v:36|./src/paralelltoserial.v:34|<techmap.v>:263" *)  selector[0];
  assign _02_[2] = selector[2] ^(* src = "./src/paralelltoserial_IDLE.v:36|./src/paralelltoserial.v:34|<techmap.v>:263" *)  _25_[1];
  assign _25_[1] = selector[1] &(* src = "./src/paralelltoserial_IDLE.v:36|./src/paralelltoserial.v:34|<techmap.v>:260|<techmap.v>:221" *)  selector[0];
  assign _02_[31:4] = 28'h0000000;
  assign _09_[1] = _07_[1];
  assign _12_[0] = selector[0];
  assign _19_[1:0] = { _07_[0], 1'h0 };
  assign { _25_[31:2], _25_[0] } = { 29'h00000000, _02_[3], selector[0] };
  assign idle1 = active;
  assign idle2 = 1'h1;
  assign idle3 = 1'h1;
  assign idle4 = 1'h1;
  assign idle5 = 1'h1;
  assign idle6 = 1'h0;
  assign idle7 = 1'h0;
endmodule

(* top =  1  *)
(* src = "./src/phy_syn.v:11" *)
module phy_syn(clk1f, clk2f, clk4f, clk32f, reset, in0, in1, in2, in3, validin, out0, out1, out2, out3, validout, out0_recir, out1_recir, out2_recir, out3_recir, valid_out_recir);
  (* src = "./src/phy_syn.v:12" *)
  input clk1f;
  (* src = "./src/phy_syn.v:13" *)
  input clk2f;
  (* src = "./src/phy_syn.v:15" *)
  input clk32f;
  (* src = "./src/phy_syn.v:14" *)
  input clk4f;
  (* src = "./src/phy_syn.v:17" *)
  input [7:0] in0;
  (* src = "./src/phy_syn.v:18" *)
  input [7:0] in1;
  (* src = "./src/phy_syn.v:19" *)
  input [7:0] in2;
  (* src = "./src/phy_syn.v:20" *)
  input [7:0] in3;
  (* src = "./src/phy_syn.v:46" *)
  wire [7:0] o0;
  (* src = "./src/phy_syn.v:46" *)
  wire [7:0] o1;
  (* src = "./src/phy_syn.v:46" *)
  wire [7:0] o2;
  (* src = "./src/phy_syn.v:46" *)
  wire [7:0] o3;
  (* src = "./src/phy_syn.v:23" *)
  output [7:0] out0;
  (* src = "./src/phy_syn.v:29" *)
  output [7:0] out0_recir;
  (* src = "./src/phy_syn.v:24" *)
  output [7:0] out1;
  (* src = "./src/phy_syn.v:30" *)
  output [7:0] out1_recir;
  (* src = "./src/phy_syn.v:25" *)
  output [7:0] out2;
  (* src = "./src/phy_syn.v:31" *)
  output [7:0] out2_recir;
  (* src = "./src/phy_syn.v:26" *)
  output [7:0] out3;
  (* src = "./src/phy_syn.v:32" *)
  output [7:0] out3_recir;
  (* src = "./src/phy_syn.v:47" *)
  wire [7:0] rc0;
  (* src = "./src/phy_syn.v:47" *)
  wire [7:0] rc1;
  (* src = "./src/phy_syn.v:47" *)
  wire [7:0] rc2;
  (* src = "./src/phy_syn.v:47" *)
  wire [7:0] rc3;
  (* src = "./src/phy_syn.v:16" *)
  input reset;
  (* src = "./src/phy_syn.v:38" *)
  wire rxtx;
  (* src = "./src/phy_syn.v:42" *)
  wire txrx;
  (* src = "./src/phy_syn.v:39" *)
  wire txrxR;
  (* src = "./src/phy_syn.v:44" *)
  wire [3:0] v_out_conec;
  (* src = "./src/phy_syn.v:48" *)
  wire [7:0] valid_orecir;
  (* src = "./src/phy_syn.v:33" *)
  output [7:0] valid_out_recir;
  (* src = "./src/phy_syn.v:21" *)
  input [3:0] validin;
  (* src = "./src/phy_syn.v:27" *)
  output [3:0] validout;
  (* src = "./src/phy_syn.v:40" *)
  wire wtxrxR;
  (* src = "./src/phy_syn.v:91" *)
  DFF _0_ (
    .C(clk32f),
    .D(wtxrxR),
    .Q(txrx)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn.v:75" *)
  phy_syn_rx_syn phy_syn_rx_syn_f (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk32f(clk32f),
    .clk4f(clk4f),
    .in(txrx),
    .out0(o0),
    .out1(o1),
    .out2(o2),
    .out3(o3),
    .out_rx_tx(rxtx),
    .reset(reset),
    .valid_out_mux14(v_out_conec)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn.v:51" *)
  phy_syn_tx_b_syn phy_syn_tx_f (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk32f(clk32f),
    .clk4f(clk4f),
    .in0(in0),
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .in_rx_tx(rxtx),
    .out0_recir(rc0),
    .out1_recir(rc1),
    .out2_recir(rc2),
    .out3_recir(rc3),
    .out_b(wtxrxR),
    .reset(reset),
    .valid_out_recir(valid_orecir),
    .validmux41(validin)
  );
  assign out0 = o0;
  assign out0_recir = rc0;
  assign out1 = o1;
  assign out1_recir = rc1;
  assign out2 = o2;
  assign out2_recir = rc2;
  assign out3 = o3;
  assign out3_recir = rc3;
  assign txrxR = wtxrxR;
  assign valid_out_recir = valid_orecir;
  assign validout = v_out_conec;
endmodule

(* src = "./src/phy_syn_rx_syn.v:17" *)
module phy_syn_rx_syn(clk1f, clk2f, clk4f, clk32f, reset, in, out0, out1, out2, out3, out_rx_tx, valid_out_mux14);
  (* src = "./src/phy_syn_rx_syn.v:42" *)
  wire [7:0] Rin_demux;
  (* src = "./src/phy_syn_rx_syn.v:37" *)
  wire active_inter;
  (* src = "./src/phy_syn_rx_syn.v:18" *)
  input clk1f;
  (* src = "./src/phy_syn_rx_syn.v:19" *)
  input clk2f;
  (* src = "./src/phy_syn_rx_syn.v:21" *)
  input clk32f;
  (* src = "./src/phy_syn_rx_syn.v:20" *)
  input clk4f;
  (* src = "./src/phy_syn_rx_syn.v:44" *)
  wire [7:0] conec0;
  (* src = "./src/phy_syn_rx_syn.v:44" *)
  wire [7:0] conec1;
  (* src = "./src/phy_syn_rx_syn.v:44" *)
  wire [7:0] conec2;
  (* src = "./src/phy_syn_rx_syn.v:44" *)
  wire [7:0] conec3;
  (* src = "./src/phy_syn_rx_syn.v:24" *)
  input in;
  (* src = "./src/phy_syn_rx_syn.v:35" *)
  wire [7:0] in_demux;
  (* src = "./src/phy_syn_rx_syn.v:26" *)
  output [7:0] out0;
  (* src = "./src/phy_syn_rx_syn.v:27" *)
  output [7:0] out1;
  (* src = "./src/phy_syn_rx_syn.v:28" *)
  output [7:0] out2;
  (* src = "./src/phy_syn_rx_syn.v:29" *)
  output [7:0] out3;
  (* src = "./src/phy_syn_rx_syn.v:30" *)
  output out_rx_tx;
  (* src = "./src/phy_syn_rx_syn.v:22" *)
  input reset;
  (* src = "./src/phy_syn_rx_syn.v:41" *)
  wire tx_rx;
  (* src = "./src/phy_syn_rx_syn.v:31" *)
  output [3:0] valid_out_mux14;
  (* src = "./src/phy_syn_rx_syn.v:39" *)
  wire validin;
  (* src = "./src/phy_syn_rx_syn.v:45" *)
  wire [3:0] validout_conec;
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _0_ (
    .C(clk4f),
    .D(in_demux[0]),
    .Q(Rin_demux[0])
  );
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _1_ (
    .C(clk4f),
    .D(in_demux[1]),
    .Q(Rin_demux[1])
  );
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _2_ (
    .C(clk4f),
    .D(in_demux[2]),
    .Q(Rin_demux[2])
  );
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _3_ (
    .C(clk4f),
    .D(in_demux[3]),
    .Q(Rin_demux[3])
  );
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _4_ (
    .C(clk4f),
    .D(in_demux[4]),
    .Q(Rin_demux[4])
  );
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _5_ (
    .C(clk4f),
    .D(in_demux[5]),
    .Q(Rin_demux[5])
  );
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _6_ (
    .C(clk4f),
    .D(in_demux[6]),
    .Q(Rin_demux[6])
  );
  (* src = "./src/phy_syn_rx_syn.v:95" *)
  DFF _7_ (
    .C(clk4f),
    .D(in_demux[7]),
    .Q(Rin_demux[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn_rx_syn.v:48" *)
  serieparalelo_syn c1 (
    .active(active_inter),
    .clk32f(clk32f),
    .clk4f(clk4f),
    .in(in),
    .out(in_demux),
    .reset(reset),
    .valid(validin)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn_rx_syn.v:62" *)
  demux1x4_behav_syn c2 (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk4f(clk4f),
    .in(Rin_demux),
    .out0(conec0),
    .out1(conec1),
    .out2(conec2),
    .out3(conec3),
    .reset(reset),
    .valid(validin),
    .validout(validout_conec)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn_rx_syn.v:78" *)
  paralelo_a_serial_syn_IDLE c3 (
    .active(active_inter),
    .clk32f(clk32f),
    .out(tx_rx),
    .reset(reset)
  );
  assign out0 = conec0;
  assign out1 = conec1;
  assign out2 = conec2;
  assign out3 = conec3;
  assign out_rx_tx = tx_rx;
  assign valid_out_mux14 = validout_conec;
endmodule

(* src = "./src/phy_syn_tx.v:15" *)
module phy_syn_tx_b_syn(clk1f, clk2f, clk4f, clk32f, reset, in0, in1, in2, in3, in_rx_tx, validmux41, out0_recir, out1_recir, out2_recir, out3_recir, valid_out_recir, out_b);
  (* src = "./src/phy_syn_tx.v:47" *)
  wire active_inter;
  (* src = "./src/phy_syn_tx.v:17" *)
  input clk1f;
  (* src = "./src/phy_syn_tx.v:18" *)
  input clk2f;
  (* src = "./src/phy_syn_tx.v:20" *)
  input clk32f;
  (* src = "./src/phy_syn_tx.v:19" *)
  input clk4f;
  (* src = "./src/phy_syn_tx.v:23" *)
  input [7:0] in0;
  (* src = "./src/phy_syn_tx.v:24" *)
  input [7:0] in1;
  (* src = "./src/phy_syn_tx.v:25" *)
  input [7:0] in2;
  (* src = "./src/phy_syn_tx.v:26" *)
  input [7:0] in3;
  (* src = "./src/phy_syn_tx.v:27" *)
  input in_rx_tx;
  (* src = "./src/phy_syn_tx.v:44" *)
  wire [7:0] mux41_to_parserno;
  (* src = "./src/phy_syn_tx.v:52" *)
  wire [7:0] o0;
  (* src = "./src/phy_syn_tx.v:52" *)
  wire [7:0] o1;
  (* src = "./src/phy_syn_tx.v:52" *)
  wire [7:0] o2;
  (* src = "./src/phy_syn_tx.v:52" *)
  wire [7:0] o3;
  (* src = "./src/phy_syn_tx.v:53" *)
  wire [7:0] ot0;
  (* src = "./src/phy_syn_tx.v:53" *)
  wire [7:0] ot1;
  (* src = "./src/phy_syn_tx.v:53" *)
  wire [7:0] ot2;
  (* src = "./src/phy_syn_tx.v:53" *)
  wire [7:0] ot3;
  (* src = "./src/phy_syn_tx.v:33" *)
  output [7:0] out0_recir;
  (* src = "./src/phy_syn_tx.v:34" *)
  output [7:0] out1_recir;
  (* src = "./src/phy_syn_tx.v:35" *)
  output [7:0] out2_recir;
  (* src = "./src/phy_syn_tx.v:36" *)
  output [7:0] out3_recir;
  (* src = "./src/phy_syn_tx.v:40" *)
  output out_b;
  (* src = "./src/phy_syn_tx.v:46" *)
  wire out_conec;
  (* src = "./src/phy_syn_tx.v:21" *)
  input reset;
  (* src = "./src/phy_syn_tx.v:37" *)
  output [7:0] valid_out_recir;
  (* src = "./src/phy_syn_tx.v:28" *)
  input [3:0] validmux41;
  (* src = "./src/phy_syn_tx.v:45" *)
  wire [3:0] validmux41_in;
  (* src = "./src/phy_syn_tx.v:49" *)
  wire validparserno;
  (* src = "./src/phy_syn_tx.v:50" *)
  wire [3:0] wvalid_out_recir;
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn_tx.v:96" *)
  mux4x1_behav_syn mux41_phy_syn_tx (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk4f(clk4f),
    .in0(o0),
    .in1(o1),
    .in2(o2),
    .in3(o3),
    .out(mux41_to_parserno),
    .reset(reset),
    .valid(validmux41_in),
    .validout(validparserno)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn_tx.v:112" *)
  paralelo_a_serial_syn parserno_tx (
    .clk32f(clk32f),
    .in(mux41_to_parserno),
    .in_valid(validparserno),
    .out(out_conec),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn_tx.v:55" *)
  recir_idle_syn reciridle (
    .clk1f(clk1f),
    .clk2f(clk2f),
    .clk4f(clk4f),
    .in0(in0),
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .out0m(o0),
    .out0t(ot0),
    .out1m(o1),
    .out1t(ot1),
    .out2m(o2),
    .out2t(ot2),
    .out3m(o3),
    .out3t(ot3),
    .reset(reset),
    .valid_in(validmux41),
    .valid_outm(validmux41_in),
    .valid_outt(wvalid_out_recir),
    .valido(active_inter)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "./src/phy_syn_tx.v:85" *)
  serieparalelo_syn_IDLE_syn spidle (
    .clk32f(clk32f),
    .clk4f(clk4f),
    .in(in_rx_tx),
    .reset(reset),
    .valido(active_inter)
  );
  assign out0_recir = ot0;
  assign out1_recir = ot1;
  assign out2_recir = ot2;
  assign out3_recir = ot3;
  assign out_b = out_conec;
  assign valid_out_recir = { 4'h0, wvalid_out_recir };
endmodule

(* src = "./src/recir_idle_syn.v:6" *)
module recir_idle_syn(clk1f, clk2f, clk4f, reset, valido, in0, in1, in2, in3, valid_in, out0m, out1m, out2m, out3m, valid_outm, out0t, out1t, out2t, out3t, valid_outt);
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _000_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _001_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _002_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _003_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _004_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _005_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _006_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [7:0] _007_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [3:0] _008_;
  (* src = "./src/recir_idle_syn.v:42" *)
  wire [3:0] _009_;
  (* src = "./src/recir_idle_syn.v:8" *)
  input clk1f;
  (* src = "./src/recir_idle_syn.v:9" *)
  input clk2f;
  (* src = "./src/recir_idle_syn.v:10" *)
  input clk4f;
  (* src = "./src/recir_idle_syn.v:15" *)
  input [7:0] in0;
  (* src = "./src/recir_idle_syn.v:16" *)
  input [7:0] in1;
  (* src = "./src/recir_idle_syn.v:17" *)
  input [7:0] in2;
  (* src = "./src/recir_idle_syn.v:18" *)
  input [7:0] in3;
  (* src = "./src/recir_idle_syn.v:21" *)
  output [7:0] out0m;
  (* src = "./src/recir_idle_syn.v:27" *)
  output [7:0] out0t;
  (* src = "./src/recir_idle_syn.v:22" *)
  output [7:0] out1m;
  (* src = "./src/recir_idle_syn.v:28" *)
  output [7:0] out1t;
  (* src = "./src/recir_idle_syn.v:23" *)
  output [7:0] out2m;
  (* src = "./src/recir_idle_syn.v:29" *)
  output [7:0] out2t;
  (* src = "./src/recir_idle_syn.v:24" *)
  output [7:0] out3m;
  (* src = "./src/recir_idle_syn.v:30" *)
  output [7:0] out3t;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm0;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm1;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm2;
  (* src = "./src/recir_idle_syn.v:38" *)
  wire [7:0] outm3;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt0;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt1;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt2;
  (* src = "./src/recir_idle_syn.v:39" *)
  wire [7:0] outt3;
  (* src = "./src/recir_idle_syn.v:11" *)
  input reset;
  (* src = "./src/recir_idle_syn.v:19" *)
  input [3:0] valid_in;
  (* src = "./src/recir_idle_syn.v:25" *)
  output [3:0] valid_outm;
  (* src = "./src/recir_idle_syn.v:31" *)
  output [3:0] valid_outt;
  (* src = "./src/recir_idle_syn.v:13" *)
  input valido;
  (* src = "./src/recir_idle_syn.v:40" *)
  wire [3:0] validoutm;
  (* src = "./src/recir_idle_syn.v:40" *)
  wire [3:0] validoutt;
  assign _008_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) valid_in[0] : 1'h0;
  assign _008_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) valid_in[1] : 1'h0;
  assign _008_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) valid_in[2] : 1'h0;
  assign _008_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) valid_in[3] : 1'h0;
  assign _009_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : valid_in[0];
  assign _009_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : valid_in[1];
  assign _009_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : valid_in[2];
  assign _009_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : valid_in[3];
  assign _005_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[0];
  assign _005_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[1];
  assign _005_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[2];
  assign _005_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[3];
  assign _005_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[4];
  assign _005_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[5];
  assign _005_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[6];
  assign _005_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in1[7];
  assign _007_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[0];
  assign _007_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[1];
  assign _007_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[2];
  assign _007_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[3];
  assign _007_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[4];
  assign _007_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[5];
  assign _007_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[6];
  assign _007_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in3[7];
  assign _006_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[0];
  assign _006_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[1];
  assign _006_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[2];
  assign _006_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[3];
  assign _006_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[4];
  assign _006_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[5];
  assign _006_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[6];
  assign _006_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in2[7];
  assign _002_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[0] : 1'h0;
  assign _002_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[1] : 1'h0;
  assign _002_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[2] : 1'h0;
  assign _002_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[3] : 1'h0;
  assign _002_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[4] : 1'h0;
  assign _002_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[5] : 1'h0;
  assign _002_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[6] : 1'h0;
  assign _002_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in2[7] : 1'h0;
  assign _004_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[0];
  assign _004_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[1];
  assign _004_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[2];
  assign _004_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[3];
  assign _004_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[4];
  assign _004_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[5];
  assign _004_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[6];
  assign _004_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) 1'h0 : in0[7];
  assign _003_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[0] : 1'h0;
  assign _003_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[1] : 1'h0;
  assign _003_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[2] : 1'h0;
  assign _003_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[3] : 1'h0;
  assign _003_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[4] : 1'h0;
  assign _003_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[5] : 1'h0;
  assign _003_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[6] : 1'h0;
  assign _003_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in3[7] : 1'h0;
  assign _001_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[0] : 1'h0;
  assign _001_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[1] : 1'h0;
  assign _001_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[2] : 1'h0;
  assign _001_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[3] : 1'h0;
  assign _001_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[4] : 1'h0;
  assign _001_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[5] : 1'h0;
  assign _001_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[6] : 1'h0;
  assign _001_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in1[7] : 1'h0;
  assign _000_[0] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[0] : 1'h0;
  assign _000_[1] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[1] : 1'h0;
  assign _000_[2] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[2] : 1'h0;
  assign _000_[3] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[3] : 1'h0;
  assign _000_[4] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[4] : 1'h0;
  assign _000_[5] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[5] : 1'h0;
  assign _000_[6] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[6] : 1'h0;
  assign _000_[7] = valido ? (* src = "./src/recir_idle_syn.v:43" *) in0[7] : 1'h0;
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _082_ (
    .C(clk1f),
    .D(validoutm[0]),
    .Q(valid_outm[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _083_ (
    .C(clk1f),
    .D(validoutm[1]),
    .Q(valid_outm[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _084_ (
    .C(clk1f),
    .D(validoutm[2]),
    .Q(valid_outm[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _085_ (
    .C(clk1f),
    .D(validoutm[3]),
    .Q(valid_outm[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _086_ (
    .C(clk1f),
    .D(outm0[0]),
    .Q(out0m[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _087_ (
    .C(clk1f),
    .D(outm0[1]),
    .Q(out0m[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _088_ (
    .C(clk1f),
    .D(outm0[2]),
    .Q(out0m[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _089_ (
    .C(clk1f),
    .D(outm0[3]),
    .Q(out0m[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _090_ (
    .C(clk1f),
    .D(outm0[4]),
    .Q(out0m[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _091_ (
    .C(clk1f),
    .D(outm0[5]),
    .Q(out0m[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _092_ (
    .C(clk1f),
    .D(outm0[6]),
    .Q(out0m[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _093_ (
    .C(clk1f),
    .D(outm0[7]),
    .Q(out0m[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _094_ (
    .C(clk1f),
    .D(outt0[0]),
    .Q(out0t[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _095_ (
    .C(clk1f),
    .D(outt0[1]),
    .Q(out0t[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _096_ (
    .C(clk1f),
    .D(outt0[2]),
    .Q(out0t[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _097_ (
    .C(clk1f),
    .D(outt0[3]),
    .Q(out0t[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _098_ (
    .C(clk1f),
    .D(outt0[4]),
    .Q(out0t[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _099_ (
    .C(clk1f),
    .D(outt0[5]),
    .Q(out0t[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _100_ (
    .C(clk1f),
    .D(outt0[6]),
    .Q(out0t[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _101_ (
    .C(clk1f),
    .D(outt0[7]),
    .Q(out0t[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _102_ (
    .C(clk1f),
    .D(outm1[0]),
    .Q(out1m[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _103_ (
    .C(clk1f),
    .D(outm1[1]),
    .Q(out1m[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _104_ (
    .C(clk1f),
    .D(outm1[2]),
    .Q(out1m[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _105_ (
    .C(clk1f),
    .D(outm1[3]),
    .Q(out1m[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _106_ (
    .C(clk1f),
    .D(outm1[4]),
    .Q(out1m[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _107_ (
    .C(clk1f),
    .D(outm1[5]),
    .Q(out1m[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _108_ (
    .C(clk1f),
    .D(outm1[6]),
    .Q(out1m[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _109_ (
    .C(clk1f),
    .D(outm1[7]),
    .Q(out1m[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _110_ (
    .C(clk1f),
    .D(outm3[0]),
    .Q(out3m[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _111_ (
    .C(clk1f),
    .D(outm3[1]),
    .Q(out3m[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _112_ (
    .C(clk1f),
    .D(outm3[2]),
    .Q(out3m[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _113_ (
    .C(clk1f),
    .D(outm3[3]),
    .Q(out3m[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _114_ (
    .C(clk1f),
    .D(outm3[4]),
    .Q(out3m[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _115_ (
    .C(clk1f),
    .D(outm3[5]),
    .Q(out3m[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _116_ (
    .C(clk1f),
    .D(outm3[6]),
    .Q(out3m[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _117_ (
    .C(clk1f),
    .D(outm3[7]),
    .Q(out3m[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _118_ (
    .C(clk1f),
    .D(outt1[0]),
    .Q(out1t[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _119_ (
    .C(clk1f),
    .D(outt1[1]),
    .Q(out1t[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _120_ (
    .C(clk1f),
    .D(outt1[2]),
    .Q(out1t[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _121_ (
    .C(clk1f),
    .D(outt1[3]),
    .Q(out1t[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _122_ (
    .C(clk1f),
    .D(outt1[4]),
    .Q(out1t[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _123_ (
    .C(clk1f),
    .D(outt1[5]),
    .Q(out1t[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _124_ (
    .C(clk1f),
    .D(outt1[6]),
    .Q(out1t[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _125_ (
    .C(clk1f),
    .D(outt1[7]),
    .Q(out1t[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _126_ (
    .C(clk1f),
    .D(outt2[0]),
    .Q(out2t[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _127_ (
    .C(clk1f),
    .D(outt2[1]),
    .Q(out2t[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _128_ (
    .C(clk1f),
    .D(outt2[2]),
    .Q(out2t[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _129_ (
    .C(clk1f),
    .D(outt2[3]),
    .Q(out2t[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _130_ (
    .C(clk1f),
    .D(outt2[4]),
    .Q(out2t[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _131_ (
    .C(clk1f),
    .D(outt2[5]),
    .Q(out2t[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _132_ (
    .C(clk1f),
    .D(outt2[6]),
    .Q(out2t[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _133_ (
    .C(clk1f),
    .D(outt2[7]),
    .Q(out2t[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _134_ (
    .C(clk1f),
    .D(outm2[0]),
    .Q(out2m[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _135_ (
    .C(clk1f),
    .D(outm2[1]),
    .Q(out2m[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _136_ (
    .C(clk1f),
    .D(outm2[2]),
    .Q(out2m[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _137_ (
    .C(clk1f),
    .D(outm2[3]),
    .Q(out2m[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _138_ (
    .C(clk1f),
    .D(outm2[4]),
    .Q(out2m[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _139_ (
    .C(clk1f),
    .D(outm2[5]),
    .Q(out2m[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _140_ (
    .C(clk1f),
    .D(outm2[6]),
    .Q(out2m[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _141_ (
    .C(clk1f),
    .D(outm2[7]),
    .Q(out2m[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _142_ (
    .C(clk1f),
    .D(outt3[0]),
    .Q(out3t[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _143_ (
    .C(clk1f),
    .D(outt3[1]),
    .Q(out3t[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _144_ (
    .C(clk1f),
    .D(outt3[2]),
    .Q(out3t[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _145_ (
    .C(clk1f),
    .D(outt3[3]),
    .Q(out3t[3])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _146_ (
    .C(clk1f),
    .D(outt3[4]),
    .Q(out3t[4])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _147_ (
    .C(clk1f),
    .D(outt3[5]),
    .Q(out3t[5])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _148_ (
    .C(clk1f),
    .D(outt3[6]),
    .Q(out3t[6])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _149_ (
    .C(clk1f),
    .D(outt3[7]),
    .Q(out3t[7])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _150_ (
    .C(clk1f),
    .D(validoutt[0]),
    .Q(valid_outt[0])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _151_ (
    .C(clk1f),
    .D(validoutt[1]),
    .Q(valid_outt[1])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _152_ (
    .C(clk1f),
    .D(validoutt[2]),
    .Q(valid_outt[2])
  );
  (* src = "./src/recir_idle_syn.v:71" *)
  DFF _153_ (
    .C(clk1f),
    .D(validoutt[3]),
    .Q(valid_outt[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _154_ (
    .C(clk4f),
    .D(_000_[0]),
    .Q(outm0[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _155_ (
    .C(clk4f),
    .D(_000_[1]),
    .Q(outm0[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _156_ (
    .C(clk4f),
    .D(_000_[2]),
    .Q(outm0[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _157_ (
    .C(clk4f),
    .D(_000_[3]),
    .Q(outm0[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _158_ (
    .C(clk4f),
    .D(_000_[4]),
    .Q(outm0[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _159_ (
    .C(clk4f),
    .D(_000_[5]),
    .Q(outm0[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _160_ (
    .C(clk4f),
    .D(_000_[6]),
    .Q(outm0[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _161_ (
    .C(clk4f),
    .D(_000_[7]),
    .Q(outm0[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _162_ (
    .C(clk4f),
    .D(_001_[0]),
    .Q(outm1[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _163_ (
    .C(clk4f),
    .D(_001_[1]),
    .Q(outm1[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _164_ (
    .C(clk4f),
    .D(_001_[2]),
    .Q(outm1[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _165_ (
    .C(clk4f),
    .D(_001_[3]),
    .Q(outm1[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _166_ (
    .C(clk4f),
    .D(_001_[4]),
    .Q(outm1[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _167_ (
    .C(clk4f),
    .D(_001_[5]),
    .Q(outm1[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _168_ (
    .C(clk4f),
    .D(_001_[6]),
    .Q(outm1[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _169_ (
    .C(clk4f),
    .D(_001_[7]),
    .Q(outm1[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _170_ (
    .C(clk4f),
    .D(_002_[0]),
    .Q(outm2[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _171_ (
    .C(clk4f),
    .D(_002_[1]),
    .Q(outm2[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _172_ (
    .C(clk4f),
    .D(_002_[2]),
    .Q(outm2[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _173_ (
    .C(clk4f),
    .D(_002_[3]),
    .Q(outm2[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _174_ (
    .C(clk4f),
    .D(_002_[4]),
    .Q(outm2[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _175_ (
    .C(clk4f),
    .D(_002_[5]),
    .Q(outm2[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _176_ (
    .C(clk4f),
    .D(_002_[6]),
    .Q(outm2[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _177_ (
    .C(clk4f),
    .D(_002_[7]),
    .Q(outm2[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _178_ (
    .C(clk4f),
    .D(_003_[0]),
    .Q(outm3[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _179_ (
    .C(clk4f),
    .D(_003_[1]),
    .Q(outm3[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _180_ (
    .C(clk4f),
    .D(_003_[2]),
    .Q(outm3[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _181_ (
    .C(clk4f),
    .D(_003_[3]),
    .Q(outm3[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _182_ (
    .C(clk4f),
    .D(_003_[4]),
    .Q(outm3[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _183_ (
    .C(clk4f),
    .D(_003_[5]),
    .Q(outm3[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _184_ (
    .C(clk4f),
    .D(_003_[6]),
    .Q(outm3[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _185_ (
    .C(clk4f),
    .D(_003_[7]),
    .Q(outm3[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _186_ (
    .C(clk4f),
    .D(_004_[0]),
    .Q(outt0[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _187_ (
    .C(clk4f),
    .D(_004_[1]),
    .Q(outt0[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _188_ (
    .C(clk4f),
    .D(_004_[2]),
    .Q(outt0[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _189_ (
    .C(clk4f),
    .D(_004_[3]),
    .Q(outt0[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _190_ (
    .C(clk4f),
    .D(_004_[4]),
    .Q(outt0[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _191_ (
    .C(clk4f),
    .D(_004_[5]),
    .Q(outt0[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _192_ (
    .C(clk4f),
    .D(_004_[6]),
    .Q(outt0[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _193_ (
    .C(clk4f),
    .D(_004_[7]),
    .Q(outt0[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _194_ (
    .C(clk4f),
    .D(_005_[0]),
    .Q(outt1[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _195_ (
    .C(clk4f),
    .D(_005_[1]),
    .Q(outt1[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _196_ (
    .C(clk4f),
    .D(_005_[2]),
    .Q(outt1[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _197_ (
    .C(clk4f),
    .D(_005_[3]),
    .Q(outt1[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _198_ (
    .C(clk4f),
    .D(_005_[4]),
    .Q(outt1[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _199_ (
    .C(clk4f),
    .D(_005_[5]),
    .Q(outt1[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _200_ (
    .C(clk4f),
    .D(_005_[6]),
    .Q(outt1[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _201_ (
    .C(clk4f),
    .D(_005_[7]),
    .Q(outt1[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _202_ (
    .C(clk4f),
    .D(_006_[0]),
    .Q(outt2[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _203_ (
    .C(clk4f),
    .D(_006_[1]),
    .Q(outt2[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _204_ (
    .C(clk4f),
    .D(_006_[2]),
    .Q(outt2[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _205_ (
    .C(clk4f),
    .D(_006_[3]),
    .Q(outt2[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _206_ (
    .C(clk4f),
    .D(_006_[4]),
    .Q(outt2[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _207_ (
    .C(clk4f),
    .D(_006_[5]),
    .Q(outt2[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _208_ (
    .C(clk4f),
    .D(_006_[6]),
    .Q(outt2[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _209_ (
    .C(clk4f),
    .D(_006_[7]),
    .Q(outt2[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _210_ (
    .C(clk4f),
    .D(_007_[0]),
    .Q(outt3[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _211_ (
    .C(clk4f),
    .D(_007_[1]),
    .Q(outt3[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _212_ (
    .C(clk4f),
    .D(_007_[2]),
    .Q(outt3[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _213_ (
    .C(clk4f),
    .D(_007_[3]),
    .Q(outt3[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _214_ (
    .C(clk4f),
    .D(_007_[4]),
    .Q(outt3[4])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _215_ (
    .C(clk4f),
    .D(_007_[5]),
    .Q(outt3[5])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _216_ (
    .C(clk4f),
    .D(_007_[6]),
    .Q(outt3[6])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _217_ (
    .C(clk4f),
    .D(_007_[7]),
    .Q(outt3[7])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _218_ (
    .C(clk4f),
    .D(_008_[0]),
    .Q(validoutm[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _219_ (
    .C(clk4f),
    .D(_008_[1]),
    .Q(validoutm[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _220_ (
    .C(clk4f),
    .D(_008_[2]),
    .Q(validoutm[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _221_ (
    .C(clk4f),
    .D(_008_[3]),
    .Q(validoutm[3])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _222_ (
    .C(clk4f),
    .D(_009_[0]),
    .Q(validoutt[0])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _223_ (
    .C(clk4f),
    .D(_009_[1]),
    .Q(validoutt[1])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _224_ (
    .C(clk4f),
    .D(_009_[2]),
    .Q(validoutt[2])
  );
  (* src = "./src/recir_idle_syn.v:42" *)
  DFF _225_ (
    .C(clk4f),
    .D(_009_[3]),
    .Q(validoutt[3])
  );
endmodule

(* src = "./src/serieparalelo_syn.v:24" *)
module serieparalelo_syn(in, clk32f, clk4f, reset, out, valid, active);
  (* src = "./src/serieparalelo_syn.v:53" *)
  wire [3:0] _000_;
  (* src = "./src/serieparalelo_syn.v:53" *)
  wire [7:0] _001_;
  (* src = "./src/serieparalelo_syn.v:42" *)
  wire [7:0] _002_;
  (* src = "./src/serieparalelo_syn.v:53" *)
  wire _003_;
  (* src = "./src/serieparalelo_syn.v:53" *)
  wire _004_;
  (* src = "./src/serieparalelo_syn.v:63" *)
  (* unused_bits = "4" *)
  wire [31:0] _005_;
  wire [3:0] _006_;
  wire [1:0] _007_;
  wire [15:0] _008_;
  wire [7:0] _009_;
  wire [7:0] _010_;
  wire _011_;
  (* src = "./src/serieparalelo_syn.v:70" *)
  wire _012_;
  wire [7:0] _013_;
  wire [3:0] _014_;
  wire [3:0] _015_;
  (* src = "./src/serieparalelo_syn.v:63|./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _016_;
  (* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  (* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)
  wire _022_;
  (* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)
  wire _023_;
  (* src = "./src/serieparalelo_syn.v:38" *)
  wire [3:0] BC_counter;
  (* src = "./src/serieparalelo_syn.v:34" *)
  output active;
  (* src = "./src/serieparalelo_syn.v:28" *)
  input clk32f;
  (* src = "./src/serieparalelo_syn.v:29" *)
  input clk4f;
  (* src = "./src/serieparalelo_syn.v:27" *)
  input in;
  (* src = "./src/serieparalelo_syn.v:32" *)
  output [7:0] out;
  (* src = "./src/serieparalelo_syn.v:37" *)
  wire [7:0] register;
  (* src = "./src/serieparalelo_syn.v:30" *)
  input reset;
  (* src = "./src/serieparalelo_syn.v:33" *)
  output valid;
  assign _007_[1] = _006_[2] |(* src = "./src/serieparalelo_syn.v:61" *)  _006_[3];
  assign _006_[0] = register[0] |(* src = "./src/serieparalelo_syn.v:70" *)  register[1];
  assign _006_[1] = _010_[2] |(* src = "./src/serieparalelo_syn.v:70" *)  _010_[3];
  assign _006_[2] = _010_[4] |(* src = "./src/serieparalelo_syn.v:70" *)  _010_[5];
  assign _006_[3] = register[6] |(* src = "./src/serieparalelo_syn.v:70" *)  _010_[7];
  assign _007_[0] = _006_[0] |(* src = "./src/serieparalelo_syn.v:70" *)  _006_[1];
  assign _011_ = _007_[0] |(* src = "./src/serieparalelo_syn.v:70" *)  _007_[1];
  assign _008_[0] = _005_[0] &(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87" *)  _018_[1];
  assign _009_[0] = _008_[0] &(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87" *)  _008_[1];
  assign active = _020_ | _009_[0];
  assign _012_ = active &(* src = "./src/serieparalelo_syn.v:70" *)  _011_;
  assign _004_ = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _012_ : 1'hx;
  assign _000_[0] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _015_[0] : 1'h0;
  assign _000_[1] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _015_[1] : 1'h0;
  assign _000_[2] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _015_[2] : 1'h0;
  assign _000_[3] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _015_[3] : 1'h0;
  assign _014_[0] = active ? (* src = "./src/serieparalelo_syn.v:62" *) BC_counter[0] : _005_[0];
  assign _014_[1] = active ? (* src = "./src/serieparalelo_syn.v:62" *) BC_counter[1] : _005_[1];
  assign _014_[2] = active ? (* src = "./src/serieparalelo_syn.v:62" *) BC_counter[2] : _005_[2];
  assign _014_[3] = active ? (* src = "./src/serieparalelo_syn.v:62" *) BC_counter[3] : _005_[3];
  assign _015_[0] = _011_ ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[0] : _014_[0];
  assign _015_[1] = _011_ ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[1] : _014_[1];
  assign _015_[2] = _011_ ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[2] : _014_[2];
  assign _015_[3] = _011_ ? (* src = "./src/serieparalelo_syn.v:61" *) BC_counter[3] : _014_[3];
  assign _013_[0] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[0] : out[0];
  assign _013_[1] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[1] : out[1];
  assign _013_[2] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[2] : out[2];
  assign _013_[3] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[3] : out[3];
  assign _013_[4] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[4] : out[4];
  assign _013_[5] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[5] : out[5];
  assign _013_[6] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[6] : out[6];
  assign _013_[7] = _004_ ? (* src = "./src/serieparalelo_syn.v:77" *) register[7] : out[7];
  assign _003_ = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _004_ : valid;
  assign _001_[0] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[0] : 1'h0;
  assign _001_[1] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[1] : 1'h0;
  assign _001_[2] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[2] : 1'h0;
  assign _001_[3] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[3] : 1'h0;
  assign _001_[4] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[4] : 1'h0;
  assign _001_[5] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[5] : 1'h0;
  assign _001_[6] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[6] : 1'h0;
  assign _001_[7] = reset ? (* src = "./src/serieparalelo_syn.v:54" *) _013_[7] : 1'h0;
  assign _002_[0] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) in : 1'h0;
  assign _002_[1] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) register[0] : 1'h0;
  assign _002_[2] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) register[1] : 1'h0;
  assign _002_[3] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) register[2] : 1'h0;
  assign _002_[4] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) register[3] : 1'h0;
  assign _002_[5] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) register[4] : 1'h0;
  assign _002_[6] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) register[5] : 1'h0;
  assign _002_[7] = reset ? (* src = "./src/serieparalelo_syn.v:43" *) register[6] : 1'h0;
  assign _020_ = ~(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87" *) _021_;
  assign _019_ = ~(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87" *) _017_[31];
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _075_ (
    .C(clk4f),
    .D(_001_[0]),
    .Q(out[0])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _076_ (
    .C(clk4f),
    .D(_001_[1]),
    .Q(out[1])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _077_ (
    .C(clk4f),
    .D(_001_[2]),
    .Q(out[2])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _078_ (
    .C(clk4f),
    .D(_001_[3]),
    .Q(out[3])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _079_ (
    .C(clk4f),
    .D(_001_[4]),
    .Q(out[4])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _080_ (
    .C(clk4f),
    .D(_001_[5]),
    .Q(out[5])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _081_ (
    .C(clk4f),
    .D(_001_[6]),
    .Q(out[6])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _082_ (
    .C(clk4f),
    .D(_001_[7]),
    .Q(out[7])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _083_ (
    .C(clk4f),
    .D(_003_),
    .Q(valid)
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _084_ (
    .C(clk4f),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _085_ (
    .C(clk4f),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _086_ (
    .C(clk4f),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  (* src = "./src/serieparalelo_syn.v:53" *)
  DFF _087_ (
    .C(clk4f),
    .D(_000_[3]),
    .Q(BC_counter[3])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _088_ (
    .C(clk32f),
    .D(_002_[0]),
    .Q(register[0])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _089_ (
    .C(clk32f),
    .D(_002_[1]),
    .Q(register[1])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _090_ (
    .C(clk32f),
    .D(_002_[2]),
    .Q(register[2])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _091_ (
    .C(clk32f),
    .D(_002_[3]),
    .Q(register[3])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _092_ (
    .C(clk32f),
    .D(_002_[4]),
    .Q(register[4])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _093_ (
    .C(clk32f),
    .D(_002_[5]),
    .Q(register[5])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _094_ (
    .C(clk32f),
    .D(_002_[6]),
    .Q(register[6])
  );
  (* src = "./src/serieparalelo_syn.v:42" *)
  DFF _095_ (
    .C(clk32f),
    .D(_002_[7]),
    .Q(register[7])
  );
  assign _010_[2] = register[2] ^(* src = "./src/serieparalelo_syn.v:70" *)  1'h1;
  assign _010_[3] = register[3] ^(* src = "./src/serieparalelo_syn.v:70" *)  1'h1;
  assign _010_[4] = register[4] ^(* src = "./src/serieparalelo_syn.v:70" *)  1'h1;
  assign _010_[5] = register[5] ^(* src = "./src/serieparalelo_syn.v:70" *)  1'h1;
  assign _010_[7] = register[7] ^(* src = "./src/serieparalelo_syn.v:70" *)  1'h1;
  assign _021_ = _019_ | _009_[0];
  assign _005_[1] = BC_counter[1] ^(* src = "./src/serieparalelo_syn.v:63|./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  BC_counter[0];
  assign _005_[2] = BC_counter[2] ^(* src = "./src/serieparalelo_syn.v:63|./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  _016_[1];
  assign _005_[3] = BC_counter[3] ^(* src = "./src/serieparalelo_syn.v:63|./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  _016_[2];
  assign _005_[0] = BC_counter[0] ^(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _018_[1] = BC_counter[1] ^(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _018_[3] = BC_counter[3] ^(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _016_[1] = BC_counter[1] &(* src = "./src/serieparalelo_syn.v:63|./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:221" *)  BC_counter[0];
  assign _016_[2] = BC_counter[2] &(* src = "./src/serieparalelo_syn.v:63|./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:229" *)  _016_[1];
  assign _022_ = _018_[1] &(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _017_[0];
  assign _023_ = _008_[1] &(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _017_[1];
  assign _008_[1] = _018_[3] &(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:222" *)  BC_counter[2];
  assign _017_[0] = BC_counter[0] |(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:212" *)  _005_[0];
  assign _017_[1] = BC_counter[1] |(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _022_;
  assign _017_[31] = BC_counter[3] |(* src = "./src/serieparalelo_syn.v:89|./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _023_;
  assign _005_[31:5] = 27'h0000000;
  assign _008_[15:2] = 14'h3fff;
  assign _009_[7:1] = 7'h7f;
  assign { _010_[6], _010_[1:0] } = { register[6], register[1:0] };
  assign { _016_[31:3], _016_[0] } = { 28'h0000000, _005_[4], BC_counter[0] };
  assign _017_[30:3] = { _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31], _017_[31] };
  assign { _018_[31:4], _018_[2], _018_[0] } = { 28'hfffffff, BC_counter[2], _005_[0] };
endmodule

(* src = "./src/serie_paralelo_idle.v:24" *)
module serieparalelo_syn_IDLE_syn(in, clk32f, clk4f, reset, valido);
  (* src = "./src/serie_paralelo_idle.v:51" *)
  wire [3:0] _00_;
  (* src = "./src/serie_paralelo_idle.v:40" *)
  wire [7:0] _01_;
  (* src = "./src/serie_paralelo_idle.v:51" *)
  wire _02_;
  (* src = "./src/serie_paralelo_idle.v:51" *)
  wire _03_;
  (* src = "./src/serie_paralelo_idle.v:61" *)
  (* unused_bits = "4" *)
  wire [31:0] _04_;
  wire [3:0] _05_;
  wire [1:0] _06_;
  wire [15:0] _07_;
  wire [7:0] _08_;
  wire [7:0] _09_;
  wire _10_;
  wire [3:0] _11_;
  wire [3:0] _12_;
  (* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _13_;
  (* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [31:0] _14_;
  wire [31:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  (* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)
  wire _19_;
  (* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)
  wire _20_;
  (* src = "./src/serie_paralelo_idle.v:36" *)
  wire [3:0] BC_counter;
  (* src = "./src/serie_paralelo_idle.v:37" *)
  wire active;
  (* src = "./src/serie_paralelo_idle.v:28" *)
  input clk32f;
  (* src = "./src/serie_paralelo_idle.v:29" *)
  input clk4f;
  (* src = "./src/serie_paralelo_idle.v:27" *)
  input in;
  (* src = "./src/serie_paralelo_idle.v:35" *)
  wire [7:0] register;
  (* src = "./src/serie_paralelo_idle.v:30" *)
  input reset;
  (* src = "./src/serie_paralelo_idle.v:32" *)
  output valido;
  assign _06_[1] = _05_[2] |(* src = "./src/serie_paralelo_idle.v:59" *)  _05_[3];
  assign _05_[0] = register[0] |(* src = "./src/serie_paralelo_idle.v:68" *)  register[1];
  assign _05_[1] = _09_[2] |(* src = "./src/serie_paralelo_idle.v:68" *)  _09_[3];
  assign _05_[2] = _09_[4] |(* src = "./src/serie_paralelo_idle.v:68" *)  _09_[5];
  assign _05_[3] = register[6] |(* src = "./src/serie_paralelo_idle.v:68" *)  _09_[7];
  assign _06_[0] = _05_[0] |(* src = "./src/serie_paralelo_idle.v:68" *)  _05_[1];
  assign _10_ = _06_[0] |(* src = "./src/serie_paralelo_idle.v:68" *)  _06_[1];
  assign _07_[0] = _04_[0] &(* src = "./src/serie_paralelo_idle.v:87" *)  _15_[1];
  assign _07_[1] = BC_counter[2] &(* src = "./src/serie_paralelo_idle.v:87" *)  _15_[3];
  assign _08_[0] = _07_[0] &(* src = "./src/serie_paralelo_idle.v:87" *)  _07_[1];
  assign active = _17_ | _08_[0];
  assign _03_ = active &(* src = "./src/serie_paralelo_idle.v:68" *)  _10_;
  assign _02_ = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _03_ : 1'h0;
  assign _00_[0] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "./src/serie_paralelo_idle.v:52" *) _12_[3] : 1'h0;
  assign _11_[0] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[0] : _04_[0];
  assign _11_[1] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[1] : _04_[1];
  assign _11_[2] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[2] : _04_[2];
  assign _11_[3] = active ? (* src = "./src/serie_paralelo_idle.v:60" *) BC_counter[3] : _04_[3];
  assign _12_[0] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[0] : _11_[0];
  assign _12_[1] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[1] : _11_[1];
  assign _12_[2] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[2] : _11_[2];
  assign _12_[3] = _10_ ? (* src = "./src/serie_paralelo_idle.v:59" *) BC_counter[3] : _11_[3];
  assign _01_[0] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) in : 1'h0;
  assign _01_[1] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[0] : 1'h0;
  assign _01_[2] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[1] : 1'h0;
  assign _01_[3] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[2] : 1'h0;
  assign _01_[4] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[3] : 1'h0;
  assign _01_[5] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[4] : 1'h0;
  assign _01_[6] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[5] : 1'h0;
  assign _01_[7] = reset ? (* src = "./src/serie_paralelo_idle.v:41" *) register[6] : 1'h0;
  assign _17_ = ~(* src = "./src/serie_paralelo_idle.v:87" *) _18_;
  assign _16_ = ~(* src = "./src/serie_paralelo_idle.v:87" *) _14_[31];
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _56_ (
    .C(clk4f),
    .D(_00_[0]),
    .Q(BC_counter[0])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _57_ (
    .C(clk4f),
    .D(_00_[1]),
    .Q(BC_counter[1])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _58_ (
    .C(clk4f),
    .D(_00_[2]),
    .Q(BC_counter[2])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _59_ (
    .C(clk4f),
    .D(_00_[3]),
    .Q(BC_counter[3])
  );
  (* src = "./src/serie_paralelo_idle.v:51" *)
  DFF _60_ (
    .C(clk4f),
    .D(_02_),
    .Q(valido)
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _61_ (
    .C(clk32f),
    .D(_01_[0]),
    .Q(register[0])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _62_ (
    .C(clk32f),
    .D(_01_[1]),
    .Q(register[1])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _63_ (
    .C(clk32f),
    .D(_01_[2]),
    .Q(register[2])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _64_ (
    .C(clk32f),
    .D(_01_[3]),
    .Q(register[3])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _65_ (
    .C(clk32f),
    .D(_01_[4]),
    .Q(register[4])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _66_ (
    .C(clk32f),
    .D(_01_[5]),
    .Q(register[5])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _67_ (
    .C(clk32f),
    .D(_01_[6]),
    .Q(register[6])
  );
  (* src = "./src/serie_paralelo_idle.v:40" *)
  DFF _68_ (
    .C(clk32f),
    .D(_01_[7]),
    .Q(register[7])
  );
  assign _09_[2] = register[2] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[3] = register[3] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[4] = register[4] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[5] = register[5] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _09_[7] = register[7] ^(* src = "./src/serie_paralelo_idle.v:68" *)  1'h1;
  assign _18_ = _16_ | _08_[0];
  assign _04_[1] = BC_counter[1] ^(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  BC_counter[0];
  assign _04_[2] = BC_counter[2] ^(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  _13_[1];
  assign _04_[3] = BC_counter[3] ^(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:263" *)  _13_[2];
  assign _04_[0] = BC_counter[0] ^(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _15_[1] = BC_counter[1] ^(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _15_[3] = BC_counter[3] ^(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:262" *)  1'h1;
  assign _13_[1] = BC_counter[1] &(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:221" *)  BC_counter[0];
  assign _13_[2] = BC_counter[2] &(* src = "./src/serie_paralelo_idle.v:61|<techmap.v>:260|<techmap.v>:229" *)  _13_[1];
  assign _19_ = _15_[1] &(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _14_[0];
  assign _20_ = _07_[1] &(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _14_[1];
  assign _14_[0] = BC_counter[0] |(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:212" *)  _04_[0];
  assign _14_[1] = BC_counter[1] |(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _19_;
  assign _14_[31] = BC_counter[3] |(* src = "./src/serie_paralelo_idle.v:87|<techmap.v>:260|<techmap.v>:221" *)  _20_;
  assign _04_[31:5] = 27'h0000000;
  assign _07_[15:2] = 14'h3fff;
  assign _08_[7:1] = 7'h7f;
  assign { _09_[6], _09_[1:0] } = { register[6], register[1:0] };
  assign { _13_[31:3], _13_[0] } = { 28'h0000000, _04_[4], BC_counter[0] };
  assign _14_[30:3] = { _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31], _14_[31] };
  assign { _15_[31:4], _15_[2], _15_[0] } = { 28'hfffffff, BC_counter[2], _04_[0] };
endmodule
