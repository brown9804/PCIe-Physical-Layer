/* Generated by Yosys 0.9 (git sha1 UNKNOWN, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os) */

(* src = "demux1x2_behav.v:22" *)
module demux1x2_behav(in, clk, reset, valid, out0, out1, valid_out);
  (* src = "demux1x2_behav.v:49" *)
  wire [7:0] _00_;
  (* src = "demux1x2_behav.v:49" *)
  wire [7:0] _01_;
  (* src = "demux1x2_behav.v:41" *)
  wire _02_;
  (* src = "demux1x2_behav.v:49" *)
  wire [1:0] _03_;
  (* src = "demux1x2_behav.v:45" *)
  wire _04_;
  wire _05_;
  wire _06_;
  wire [7:0] _07_;
  wire [7:0] _08_;
  wire [7:0] _09_;
  wire [7:0] _10_;
  (* src = "demux1x2_behav.v:25" *)
  input clk;
  (* src = "demux1x2_behav.v:24" *)
  input [7:0] in;
  (* src = "demux1x2_behav.v:37" *)
  wire [7:0] node0;
  (* src = "demux1x2_behav.v:38" *)
  wire [7:0] node1;
  (* src = "demux1x2_behav.v:30" *)
  output [7:0] out0;
  (* src = "demux1x2_behav.v:31" *)
  output [7:0] out1;
  (* src = "demux1x2_behav.v:26" *)
  input reset;
  (* src = "demux1x2_behav.v:36" *)
  wire selector;
  (* src = "demux1x2_behav.v:27" *)
  input valid;
  (* src = "demux1x2_behav.v:32" *)
  output [1:0] valid_out;
  assign _05_ = selector ? (* src = "demux1x2_behav.v:54" *) valid_out[1] : valid;
  assign _03_[1] = reset ? (* src = "demux1x2_behav.v:50" *) _05_ : valid_out[1];
  assign _07_[0] = valid ? (* src = "demux1x2_behav.v:55" *) in[0] : node0[0];
  assign _07_[1] = valid ? (* src = "demux1x2_behav.v:55" *) in[1] : node0[1];
  assign _07_[2] = valid ? (* src = "demux1x2_behav.v:55" *) in[2] : node0[2];
  assign _07_[3] = valid ? (* src = "demux1x2_behav.v:55" *) in[3] : node0[3];
  assign _07_[4] = valid ? (* src = "demux1x2_behav.v:55" *) in[4] : node0[4];
  assign _07_[5] = valid ? (* src = "demux1x2_behav.v:55" *) in[5] : node0[5];
  assign _07_[6] = valid ? (* src = "demux1x2_behav.v:55" *) in[6] : node0[6];
  assign _07_[7] = valid ? (* src = "demux1x2_behav.v:55" *) in[7] : node0[7];
  assign _06_ = selector ? (* src = "demux1x2_behav.v:54" *) valid : valid_out[0];
  assign _03_[0] = reset ? (* src = "demux1x2_behav.v:50" *) _06_ : valid_out[0];
  assign _08_[0] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[0] : node0[0];
  assign _08_[1] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[1] : node0[1];
  assign _08_[2] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[2] : node0[2];
  assign _08_[3] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[3] : node0[3];
  assign _08_[4] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[4] : node0[4];
  assign _08_[5] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[5] : node0[5];
  assign _08_[6] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[6] : node0[6];
  assign _08_[7] = selector ? (* src = "demux1x2_behav.v:54" *) _07_[7] : node0[7];
  assign _00_[0] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "demux1x2_behav.v:50" *) _08_[7] : 1'h0;
  assign _01_[0] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "demux1x2_behav.v:50" *) _10_[7] : 1'h0;
  assign _09_[0] = valid ? (* src = "demux1x2_behav.v:63" *) in[0] : node1[0];
  assign _09_[1] = valid ? (* src = "demux1x2_behav.v:63" *) in[1] : node1[1];
  assign _09_[2] = valid ? (* src = "demux1x2_behav.v:63" *) in[2] : node1[2];
  assign _09_[3] = valid ? (* src = "demux1x2_behav.v:63" *) in[3] : node1[3];
  assign _09_[4] = valid ? (* src = "demux1x2_behav.v:63" *) in[4] : node1[4];
  assign _09_[5] = valid ? (* src = "demux1x2_behav.v:63" *) in[5] : node1[5];
  assign _09_[6] = valid ? (* src = "demux1x2_behav.v:63" *) in[6] : node1[6];
  assign _09_[7] = valid ? (* src = "demux1x2_behav.v:63" *) in[7] : node1[7];
  assign _10_[0] = selector ? (* src = "demux1x2_behav.v:54" *) node1[0] : _09_[0];
  assign _10_[1] = selector ? (* src = "demux1x2_behav.v:54" *) node1[1] : _09_[1];
  assign _10_[2] = selector ? (* src = "demux1x2_behav.v:54" *) node1[2] : _09_[2];
  assign _10_[3] = selector ? (* src = "demux1x2_behav.v:54" *) node1[3] : _09_[3];
  assign _10_[4] = selector ? (* src = "demux1x2_behav.v:54" *) node1[4] : _09_[4];
  assign _10_[5] = selector ? (* src = "demux1x2_behav.v:54" *) node1[5] : _09_[5];
  assign _10_[6] = selector ? (* src = "demux1x2_behav.v:54" *) node1[6] : _09_[6];
  assign _10_[7] = selector ? (* src = "demux1x2_behav.v:54" *) node1[7] : _09_[7];
  assign _02_ = reset ? (* src = "demux1x2_behav.v:42" *) _04_ : 1'h0;
  assign _04_ = ~(* src = "demux1x2_behav.v:45" *) selector;
  (* src = "demux1x2_behav.v:75" *)
  DFF _65_ (
    .C(clk),
    .D(node0[0]),
    .Q(out0[0])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _66_ (
    .C(clk),
    .D(node0[1]),
    .Q(out0[1])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _67_ (
    .C(clk),
    .D(node0[2]),
    .Q(out0[2])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _68_ (
    .C(clk),
    .D(node0[3]),
    .Q(out0[3])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _69_ (
    .C(clk),
    .D(node0[4]),
    .Q(out0[4])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _70_ (
    .C(clk),
    .D(node0[5]),
    .Q(out0[5])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _71_ (
    .C(clk),
    .D(node0[6]),
    .Q(out0[6])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _72_ (
    .C(clk),
    .D(node0[7]),
    .Q(out0[7])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _73_ (
    .C(clk),
    .D(node1[0]),
    .Q(out1[0])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _74_ (
    .C(clk),
    .D(node1[1]),
    .Q(out1[1])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _75_ (
    .C(clk),
    .D(node1[2]),
    .Q(out1[2])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _76_ (
    .C(clk),
    .D(node1[3]),
    .Q(out1[3])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _77_ (
    .C(clk),
    .D(node1[4]),
    .Q(out1[4])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _78_ (
    .C(clk),
    .D(node1[5]),
    .Q(out1[5])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _79_ (
    .C(clk),
    .D(node1[6]),
    .Q(out1[6])
  );
  (* src = "demux1x2_behav.v:75" *)
  DFF _80_ (
    .C(clk),
    .D(node1[7]),
    .Q(out1[7])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _81_ (
    .C(clk),
    .D(_03_[0]),
    .Q(valid_out[0])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _82_ (
    .C(clk),
    .D(_03_[1]),
    .Q(valid_out[1])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _83_ (
    .C(clk),
    .D(_00_[0]),
    .Q(node0[0])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _84_ (
    .C(clk),
    .D(_00_[1]),
    .Q(node0[1])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _85_ (
    .C(clk),
    .D(_00_[2]),
    .Q(node0[2])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _86_ (
    .C(clk),
    .D(_00_[3]),
    .Q(node0[3])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _87_ (
    .C(clk),
    .D(_00_[4]),
    .Q(node0[4])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _88_ (
    .C(clk),
    .D(_00_[5]),
    .Q(node0[5])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _89_ (
    .C(clk),
    .D(_00_[6]),
    .Q(node0[6])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _90_ (
    .C(clk),
    .D(_00_[7]),
    .Q(node0[7])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _91_ (
    .C(clk),
    .D(_01_[0]),
    .Q(node1[0])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _92_ (
    .C(clk),
    .D(_01_[1]),
    .Q(node1[1])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _93_ (
    .C(clk),
    .D(_01_[2]),
    .Q(node1[2])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _94_ (
    .C(clk),
    .D(_01_[3]),
    .Q(node1[3])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _95_ (
    .C(clk),
    .D(_01_[4]),
    .Q(node1[4])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _96_ (
    .C(clk),
    .D(_01_[5]),
    .Q(node1[5])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _97_ (
    .C(clk),
    .D(_01_[6]),
    .Q(node1[6])
  );
  (* src = "demux1x2_behav.v:49" *)
  DFF _98_ (
    .C(clk),
    .D(_01_[7]),
    .Q(node1[7])
  );
  (* src = "demux1x2_behav.v:41" *)
  DFF _99_ (
    .C(clk),
    .D(_02_),
    .Q(selector)
  );
endmodule

(* top =  1  *)
(* src = "demux1x4_behav.v:25" *)
module demux1x4_behav(clk1f, clk2f, clk4f, reset, in, valid, out0, out1, out2, out3, valid_out);
  (* src = "demux1x4_behav.v:26" *)
  input clk1f;
  (* src = "demux1x4_behav.v:27" *)
  input clk2f;
  (* src = "demux1x4_behav.v:28" *)
  input clk4f;
  (* src = "demux1x4_behav.v:32" *)
  input [7:0] in;
  (* src = "demux1x4_behav.v:36" *)
  output [7:0] out0;
  (* src = "demux1x4_behav.v:37" *)
  output [7:0] out1;
  (* src = "demux1x4_behav.v:38" *)
  output [7:0] out2;
  (* src = "demux1x4_behav.v:39" *)
  output [7:0] out3;
  (* src = "demux1x4_behav.v:51" *)
  wire [7:0] pre_out0;
  (* src = "demux1x4_behav.v:51" *)
  wire [7:0] pre_out1;
  (* src = "demux1x4_behav.v:51" *)
  wire [7:0] pre_out2;
  (* src = "demux1x4_behav.v:51" *)
  wire [7:0] pre_out3;
  (* src = "demux1x4_behav.v:29" *)
  input reset;
  (* src = "demux1x4_behav.v:50" *)
  wire [3:0] v_out;
  (* src = "demux1x4_behav.v:33" *)
  input valid;
  (* src = "demux1x4_behav.v:47" *)
  wire [1:0] valid_12;
  (* src = "demux1x4_behav.v:47" *)
  wire [1:0] valid_24;
  (* src = "demux1x4_behav.v:40" *)
  output [3:0] valid_out;
  (* src = "demux1x4_behav.v:50" *)
  wire [3:0] valid_out24;
  (* src = "demux1x4_behav.v:46" *)
  wire [7:0] x_0;
  (* src = "demux1x4_behav.v:46" *)
  wire [7:0] x_1;
  (* src = "demux1x4_behav.v:48" *)
  wire [7:0] x_2;
  (* src = "demux1x4_behav.v:48" *)
  wire [7:0] x_3;
  (* src = "demux1x4_behav.v:49" *)
  wire [7:0] x_4;
  (* src = "demux1x4_behav.v:49" *)
  wire [7:0] x_5;
  (* src = "demux1x4_behav.v:49" *)
  wire [7:0] x_6;
  (* src = "demux1x4_behav.v:49" *)
  wire [7:0] x_7;
  (* module_not_derived = 32'd1 *)
  (* src = "demux1x4_behav.v:54" *)
  demux1x2_behav demux12 (
    .clk(clk4f),
    .in(in),
    .out0(x_0),
    .out1(x_1),
    .reset(reset),
    .valid(valid),
    .valid_out(valid_12)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "demux1x4_behav.v:91" *)
  demux2x4_behav demux_24 (
    .clk(clk2f),
    .in0(x_2),
    .in1(x_3),
    .out0(x_4),
    .out1(x_5),
    .out2(x_6),
    .out3(x_7),
    .reset(reset),
    .valid(valid_24),
    .valid_out(valid_out24)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "demux1x4_behav.v:106" *)
  ff4in4o flops14 (
    .clkf(clk1f),
    .in0(x_4),
    .in1(x_5),
    .in2(x_6),
    .in3(x_7),
    .out0(pre_out0),
    .out1(pre_out1),
    .out2(pre_out2),
    .out3(pre_out3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "demux1x4_behav.v:66" *)
  ff2in2o flops1_2 (
    .clkf(clk2f),
    .in0(x_0),
    .in1(x_1),
    .out0(x_2),
    .out1(x_3),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "demux1x4_behav.v:76" *)
  ff4in4ovalid flops1_2valid (
    .clkf(clk2f),
    .in0(valid_12[0]),
    .in1(valid_12[1]),
    .out0(valid_24[0]),
    .out1(valid_24[1]),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "demux1x4_behav.v:121" *)
  ff4in4ovalid flops2_4valid (
    .clkf(clk1f),
    .in0(valid_out24[0]),
    .in1(valid_out24[1]),
    .in2(valid_out24[2]),
    .in3(valid_out24[3]),
    .out0(v_out[0]),
    .out1(v_out[1]),
    .out2(v_out[2]),
    .out3(v_out[3]),
    .reset(reset)
  );
  assign out0 = pre_out0;
  assign out1 = pre_out1;
  assign out2 = pre_out2;
  assign out3 = pre_out3;
  assign valid_out = v_out;
endmodule

(* src = "demux2x4_behav.v:22" *)
module demux2x4_behav(clk, reset, in0, in1, valid, out0, out1, out2, out3, valid_out);
  (* src = "demux2x4_behav.v:24" *)
  input clk;
  (* src = "demux2x4_behav.v:28" *)
  input [7:0] in0;
  (* src = "demux2x4_behav.v:29" *)
  input [7:0] in1;
  (* src = "demux2x4_behav.v:34" *)
  output [7:0] out0;
  (* src = "demux2x4_behav.v:35" *)
  output [7:0] out1;
  (* src = "demux2x4_behav.v:36" *)
  output [7:0] out2;
  (* src = "demux2x4_behav.v:37" *)
  output [7:0] out3;
  (* src = "demux2x4_behav.v:42" *)
  wire [7:0] pre_out0;
  (* src = "demux2x4_behav.v:43" *)
  wire [7:0] pre_out1;
  (* src = "demux2x4_behav.v:44" *)
  wire [7:0] pre_out2;
  (* src = "demux2x4_behav.v:45" *)
  wire [7:0] pre_out3;
  (* src = "demux2x4_behav.v:25" *)
  input reset;
  (* src = "demux2x4_behav.v:47" *)
  wire [1:0] v_out0;
  (* src = "demux2x4_behav.v:48" *)
  wire [1:0] v_out1;
  (* src = "demux2x4_behav.v:30" *)
  input [1:0] valid;
  (* src = "demux2x4_behav.v:38" *)
  output [3:0] valid_out;
  (* module_not_derived = 32'd1 *)
  (* src = "demux2x4_behav.v:51" *)
  demux1x2_behav demux12_0 (
    .clk(clk),
    .in(in0),
    .out0(pre_out0),
    .out1(pre_out1),
    .reset(reset),
    .valid(valid[0]),
    .valid_out(v_out0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "demux2x4_behav.v:62" *)
  demux1x2_behav demux12_1 (
    .clk(clk),
    .in(in1),
    .out0(pre_out2),
    .out1(pre_out3),
    .reset(reset),
    .valid(valid[1]),
    .valid_out(v_out1)
  );
  assign out0 = pre_out0;
  assign out1 = pre_out1;
  assign out2 = pre_out2;
  assign out3 = pre_out3;
  assign valid_out = { v_out1, v_out0 };
endmodule

(* src = "ff2in2o.v:8" *)
module ff2in2o(clkf, reset, in0, in1, out0, out1);
  (* src = "ff2in2o.v:19" *)
  wire [7:0] _00_;
  (* src = "ff2in2o.v:19" *)
  wire [7:0] _01_;
  (* src = "ff2in2o.v:9" *)
  input clkf;
  (* src = "ff2in2o.v:12" *)
  input [7:0] in0;
  (* src = "ff2in2o.v:13" *)
  input [7:0] in1;
  (* src = "ff2in2o.v:15" *)
  output [7:0] out0;
  (* src = "ff2in2o.v:16" *)
  output [7:0] out1;
  (* src = "ff2in2o.v:10" *)
  input reset;
  assign _01_[0] = reset ? (* src = "ff2in2o.v:23" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "ff2in2o.v:23" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "ff2in2o.v:23" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "ff2in2o.v:23" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "ff2in2o.v:23" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "ff2in2o.v:23" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "ff2in2o.v:23" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "ff2in2o.v:23" *) in1[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "ff2in2o.v:23" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "ff2in2o.v:23" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "ff2in2o.v:23" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "ff2in2o.v:23" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "ff2in2o.v:23" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "ff2in2o.v:23" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "ff2in2o.v:23" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "ff2in2o.v:23" *) in0[7] : 1'h0;
  (* src = "ff2in2o.v:19" *)
  DFF _18_ (
    .C(clkf),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _19_ (
    .C(clkf),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _20_ (
    .C(clkf),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _21_ (
    .C(clkf),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _22_ (
    .C(clkf),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _23_ (
    .C(clkf),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _24_ (
    .C(clkf),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _25_ (
    .C(clkf),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _26_ (
    .C(clkf),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _27_ (
    .C(clkf),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _28_ (
    .C(clkf),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _29_ (
    .C(clkf),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _30_ (
    .C(clkf),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _31_ (
    .C(clkf),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _32_ (
    .C(clkf),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "ff2in2o.v:19" *)
  DFF _33_ (
    .C(clkf),
    .D(_01_[7]),
    .Q(out1[7])
  );
endmodule

(* src = "ff4in4o.v:8" *)
module ff4in4o(clkf, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "ff4in4o.v:23" *)
  wire [7:0] _00_;
  (* src = "ff4in4o.v:23" *)
  wire [7:0] _01_;
  (* src = "ff4in4o.v:23" *)
  wire [7:0] _02_;
  (* src = "ff4in4o.v:23" *)
  wire [7:0] _03_;
  (* src = "ff4in4o.v:9" *)
  input clkf;
  (* src = "ff4in4o.v:12" *)
  input [7:0] in0;
  (* src = "ff4in4o.v:13" *)
  input [7:0] in1;
  (* src = "ff4in4o.v:14" *)
  input [7:0] in2;
  (* src = "ff4in4o.v:15" *)
  input [7:0] in3;
  (* src = "ff4in4o.v:17" *)
  output [7:0] out0;
  (* src = "ff4in4o.v:18" *)
  output [7:0] out1;
  (* src = "ff4in4o.v:19" *)
  output [7:0] out2;
  (* src = "ff4in4o.v:20" *)
  output [7:0] out3;
  (* src = "ff4in4o.v:10" *)
  input reset;
  assign _02_[0] = reset ? (* src = "ff4in4o.v:27" *) in2[0] : 1'h0;
  assign _02_[1] = reset ? (* src = "ff4in4o.v:27" *) in2[1] : 1'h0;
  assign _02_[2] = reset ? (* src = "ff4in4o.v:27" *) in2[2] : 1'h0;
  assign _02_[3] = reset ? (* src = "ff4in4o.v:27" *) in2[3] : 1'h0;
  assign _02_[4] = reset ? (* src = "ff4in4o.v:27" *) in2[4] : 1'h0;
  assign _02_[5] = reset ? (* src = "ff4in4o.v:27" *) in2[5] : 1'h0;
  assign _02_[6] = reset ? (* src = "ff4in4o.v:27" *) in2[6] : 1'h0;
  assign _02_[7] = reset ? (* src = "ff4in4o.v:27" *) in2[7] : 1'h0;
  assign _03_[0] = reset ? (* src = "ff4in4o.v:27" *) in3[0] : 1'h0;
  assign _03_[1] = reset ? (* src = "ff4in4o.v:27" *) in3[1] : 1'h0;
  assign _03_[2] = reset ? (* src = "ff4in4o.v:27" *) in3[2] : 1'h0;
  assign _03_[3] = reset ? (* src = "ff4in4o.v:27" *) in3[3] : 1'h0;
  assign _03_[4] = reset ? (* src = "ff4in4o.v:27" *) in3[4] : 1'h0;
  assign _03_[5] = reset ? (* src = "ff4in4o.v:27" *) in3[5] : 1'h0;
  assign _03_[6] = reset ? (* src = "ff4in4o.v:27" *) in3[6] : 1'h0;
  assign _03_[7] = reset ? (* src = "ff4in4o.v:27" *) in3[7] : 1'h0;
  assign _01_[0] = reset ? (* src = "ff4in4o.v:27" *) in1[0] : 1'h0;
  assign _01_[1] = reset ? (* src = "ff4in4o.v:27" *) in1[1] : 1'h0;
  assign _01_[2] = reset ? (* src = "ff4in4o.v:27" *) in1[2] : 1'h0;
  assign _01_[3] = reset ? (* src = "ff4in4o.v:27" *) in1[3] : 1'h0;
  assign _01_[4] = reset ? (* src = "ff4in4o.v:27" *) in1[4] : 1'h0;
  assign _01_[5] = reset ? (* src = "ff4in4o.v:27" *) in1[5] : 1'h0;
  assign _01_[6] = reset ? (* src = "ff4in4o.v:27" *) in1[6] : 1'h0;
  assign _01_[7] = reset ? (* src = "ff4in4o.v:27" *) in1[7] : 1'h0;
  assign _00_[0] = reset ? (* src = "ff4in4o.v:27" *) in0[0] : 1'h0;
  assign _00_[1] = reset ? (* src = "ff4in4o.v:27" *) in0[1] : 1'h0;
  assign _00_[2] = reset ? (* src = "ff4in4o.v:27" *) in0[2] : 1'h0;
  assign _00_[3] = reset ? (* src = "ff4in4o.v:27" *) in0[3] : 1'h0;
  assign _00_[4] = reset ? (* src = "ff4in4o.v:27" *) in0[4] : 1'h0;
  assign _00_[5] = reset ? (* src = "ff4in4o.v:27" *) in0[5] : 1'h0;
  assign _00_[6] = reset ? (* src = "ff4in4o.v:27" *) in0[6] : 1'h0;
  assign _00_[7] = reset ? (* src = "ff4in4o.v:27" *) in0[7] : 1'h0;
  (* src = "ff4in4o.v:23" *)
  DFF _36_ (
    .C(clkf),
    .D(_00_[0]),
    .Q(out0[0])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _37_ (
    .C(clkf),
    .D(_00_[1]),
    .Q(out0[1])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _38_ (
    .C(clkf),
    .D(_00_[2]),
    .Q(out0[2])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _39_ (
    .C(clkf),
    .D(_00_[3]),
    .Q(out0[3])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _40_ (
    .C(clkf),
    .D(_00_[4]),
    .Q(out0[4])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _41_ (
    .C(clkf),
    .D(_00_[5]),
    .Q(out0[5])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _42_ (
    .C(clkf),
    .D(_00_[6]),
    .Q(out0[6])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _43_ (
    .C(clkf),
    .D(_00_[7]),
    .Q(out0[7])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _44_ (
    .C(clkf),
    .D(_01_[0]),
    .Q(out1[0])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _45_ (
    .C(clkf),
    .D(_01_[1]),
    .Q(out1[1])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _46_ (
    .C(clkf),
    .D(_01_[2]),
    .Q(out1[2])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _47_ (
    .C(clkf),
    .D(_01_[3]),
    .Q(out1[3])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _48_ (
    .C(clkf),
    .D(_01_[4]),
    .Q(out1[4])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _49_ (
    .C(clkf),
    .D(_01_[5]),
    .Q(out1[5])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _50_ (
    .C(clkf),
    .D(_01_[6]),
    .Q(out1[6])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _51_ (
    .C(clkf),
    .D(_01_[7]),
    .Q(out1[7])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _52_ (
    .C(clkf),
    .D(_02_[0]),
    .Q(out2[0])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _53_ (
    .C(clkf),
    .D(_02_[1]),
    .Q(out2[1])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _54_ (
    .C(clkf),
    .D(_02_[2]),
    .Q(out2[2])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _55_ (
    .C(clkf),
    .D(_02_[3]),
    .Q(out2[3])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _56_ (
    .C(clkf),
    .D(_02_[4]),
    .Q(out2[4])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _57_ (
    .C(clkf),
    .D(_02_[5]),
    .Q(out2[5])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _58_ (
    .C(clkf),
    .D(_02_[6]),
    .Q(out2[6])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _59_ (
    .C(clkf),
    .D(_02_[7]),
    .Q(out2[7])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _60_ (
    .C(clkf),
    .D(_03_[0]),
    .Q(out3[0])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _61_ (
    .C(clkf),
    .D(_03_[1]),
    .Q(out3[1])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _62_ (
    .C(clkf),
    .D(_03_[2]),
    .Q(out3[2])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _63_ (
    .C(clkf),
    .D(_03_[3]),
    .Q(out3[3])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _64_ (
    .C(clkf),
    .D(_03_[4]),
    .Q(out3[4])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _65_ (
    .C(clkf),
    .D(_03_[5]),
    .Q(out3[5])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _66_ (
    .C(clkf),
    .D(_03_[6]),
    .Q(out3[6])
  );
  (* src = "ff4in4o.v:23" *)
  DFF _67_ (
    .C(clkf),
    .D(_03_[7]),
    .Q(out3[7])
  );
endmodule

(* src = "ff4in4ovalid.v:6" *)
module ff4in4ovalid(clkf, reset, in0, in1, in2, in3, out0, out1, out2, out3);
  (* src = "ff4in4ovalid.v:21" *)
  wire _00_;
  (* src = "ff4in4ovalid.v:21" *)
  wire _01_;
  (* src = "ff4in4ovalid.v:21" *)
  wire _02_;
  (* src = "ff4in4ovalid.v:21" *)
  wire _03_;
  (* src = "ff4in4ovalid.v:7" *)
  input clkf;
  (* src = "ff4in4ovalid.v:10" *)
  input in0;
  (* src = "ff4in4ovalid.v:11" *)
  input in1;
  (* src = "ff4in4ovalid.v:12" *)
  input in2;
  (* src = "ff4in4ovalid.v:13" *)
  input in3;
  (* src = "ff4in4ovalid.v:15" *)
  output out0;
  (* src = "ff4in4ovalid.v:16" *)
  output out1;
  (* src = "ff4in4ovalid.v:17" *)
  output out2;
  (* src = "ff4in4ovalid.v:18" *)
  output out3;
  (* src = "ff4in4ovalid.v:8" *)
  input reset;
  assign _03_ = reset ? (* src = "ff4in4ovalid.v:25" *) in3 : 1'h0;
  assign _02_ = reset ? (* src = "ff4in4ovalid.v:25" *) in2 : 1'h0;
  assign _01_ = reset ? (* src = "ff4in4ovalid.v:25" *) in1 : 1'h0;
  assign _00_ = reset ? (* src = "ff4in4ovalid.v:25" *) in0 : 1'h0;
  (* src = "ff4in4ovalid.v:21" *)
  DFF _08_ (
    .C(clkf),
    .D(_00_),
    .Q(out0)
  );
  (* src = "ff4in4ovalid.v:21" *)
  DFF _09_ (
    .C(clkf),
    .D(_01_),
    .Q(out1)
  );
  (* src = "ff4in4ovalid.v:21" *)
  DFF _10_ (
    .C(clkf),
    .D(_02_),
    .Q(out2)
  );
  (* src = "ff4in4ovalid.v:21" *)
  DFF _11_ (
    .C(clkf),
    .D(_03_),
    .Q(out3)
  );
endmodule
